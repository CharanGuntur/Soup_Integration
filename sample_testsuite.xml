<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="CDS2.0_eTNMS_GOLDEN_TESTSUITE_WITH REPORTING" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" id="d302fb18-2bd6-404c-b512-e603063679cc" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="eTNMS_GOLDEN_TEST_SUITE."/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value="Z:\Execution_Report\Report_html"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="CDSSoap11" type="wsdl" bindingName="{http://www.fedex.com/xmlns/cds2/ws}CDSSoap11" soapVersion="1_1" anonymous="optional" definition="http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear/cds2.wsdl" id="3a2927cd-ec19-4512-86ab-ca88972af248" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear/cds2.wsdl"><con:part><con:url>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear/cds2.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.fedex.com/xmlns/cds2/ws" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:p="http://www.w3.org/2001/XMLSchema" xmlns:sch="http://www.fedex.com/xmlns/cds2" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.fedex.com/xmlns/cds2/ws">
  <wsdl:types>
    <xs:schema targetNamespace="http://www.fedex.com/xmlns/cds2" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fedex.com/xmlns/cds2">
      <xs:element name="addRequest">
        <xs:annotation>
          <xs:documentation>The add operation is used to add new stanzas to an existing key.
						If the key does not exist an error is thrown.
						If the stanza already exists for that key an error is thrown.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="addItem" type="keyedDocumentType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="addResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="addItem" type="keyedStanzasType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="chainedQueryRequest">
        <xs:annotation>
          <xs:documentation>Use chainedQuery when you need dependent operations to be invoked in a single unit of work in the specified
						order in which the composed operations will be invoked.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="parameterSet">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="name" type="xs:string"/>
                  <xs:element maxOccurs="unbounded" name="parameter">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="name" type="xs:string"/>
                        <xs:element name="value" type="xs:string"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:choice maxOccurs="unbounded">
              <xs:element ref="keyQueryRequest"/>
              <xs:element ref="indexQueryRequest"/>
            </xs:choice>
            <xs:element name="responseQueries">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" name="name" type="xs:string"/>
                </xs:sequence>
                <xs:attribute name="partialResult" type="xs:boolean" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="chainedQueryResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="queryResponse">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="queryName" type="xs:string"/>
                  <xs:element minOccurs="0" name="parameterSetName" type="xs:string"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="keyedStanzas" type="keyedStanzasType"/>
                </xs:sequence>
                <xs:attribute name="partialResult" type="xs:boolean" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="compositeRequest">
        <xs:annotation>
          <xs:documentation>Use composite when you need independent heterogenous operations to be invoked in a single unit of work.
						There is no guarantee of the order on which the composed operations will be invoked. The first failure will
						cause the whole transaction to be rolled back.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" ref="insertRequest"/>
            <xs:element minOccurs="0" ref="modifyRequest"/>
            <xs:element minOccurs="0" ref="addRequest"/>
            <xs:element minOccurs="0" ref="deleteRequest"/>
            <xs:element minOccurs="0" ref="keyQueryRequest"/>
            <xs:element minOccurs="0" ref="indexQueryRequest"/>
            <xs:element minOccurs="0" ref="enrichedQueryRequest"/>
            <xs:element minOccurs="0" ref="enrichedUpdateRequest"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="compositeResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" ref="insertResponse"/>
            <xs:element minOccurs="0" ref="modifyResponse"/>
            <xs:element minOccurs="0" ref="addResponse"/>
            <xs:element minOccurs="0" ref="deleteResponse"/>
            <xs:element minOccurs="0" ref="keyQueryResponse"/>
            <xs:element minOccurs="0" ref="indexQueryResponse"/>
            <xs:element minOccurs="0" ref="enrichedQueryResponse"/>
            <xs:element minOccurs="0" ref="enrichedUpdateResponse"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="deleteRequest">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="deleteItem">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" name="key" type="xs:long"/>
                  <xs:element maxOccurs="unbounded" name="stanzaId">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="domain" type="xs:string"/>
                        <xs:element name="name" type="xs:string"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                  <xs:element minOccurs="0" name="changeContext" type="changeContextType"/>
                </xs:sequence>
                <xs:attribute name="bulkDelete" type="xs:boolean" use="optional"/>
                <xs:attribute name="skipUpdateNotifications" type="xs:boolean" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="deleteResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="deleteItem" type="keyedStanzasType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="enrichedQueryRequest">
        <xs:annotation>
          <xs:documentation>The enrichedQuery method is for plug-in backed operations that are query-only in nature and so do not
						require transactional support.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="name" type="xs:string"/>
            <xs:any processContents="lax"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="enrichedQueryResponse">
        <xs:annotation>
          <xs:documentation></xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="name" type="xs:string"/>
            <xs:any maxOccurs="unbounded" minOccurs="0" processContents="lax"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="enrichedUpdateRequest">
        <xs:annotation>
          <xs:documentation>The enrichedUpdate method is for plug-in backed operations that perform updates to the data store
						and thus require transactional support.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="name" type="xs:string"/>
            <xs:any processContents="lax"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="enrichedUpdateResponse">
        <xs:annotation>
          <xs:documentation></xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="name" type="xs:string"/>
            <xs:any maxOccurs="unbounded" minOccurs="0" processContents="lax"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="indexQueryRequest">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="name" type="xs:string"/>
            <xs:element maxOccurs="unbounded" name="queryItem">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" name="index">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="stanzaId" type="stanzaIdType"/>
                        <xs:element maxOccurs="unbounded" name="indexElement" type="indexElementType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="sortElement" type="sortElementType"/>
                      </xs:sequence>
                      <xs:attribute name="effectiveDateFilter" type="effectiveDateFilterType" use="optional"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element maxOccurs="unbounded" name="stanzaId" type="stanzaIdType"/>
                  <xs:element minOccurs="0" name="paging" type="pagingRequestType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="indexQueryResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="queryItem">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="keyedStanzas" type="keyedStanzasType"/>
                  <xs:element minOccurs="0" name="paging" type="pagingResponseType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="insertRequest">
        <xs:annotation>
          <xs:documentation>The insert operation is used to create a new key and associate the provided stanzas to it.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="insertItem">
              <xs:complexType>
                <xs:sequence>
                  <xs:any maxOccurs="unbounded" namespace="##other" processContents="skip"/>
                  <xs:element minOccurs="0" name="changeContext" type="changeContextType"/>
                </xs:sequence>
                <xs:attribute name="skipUpdateNotifications" type="xs:boolean" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="insertResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="insertItem" type="keyedStanzasType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="importDataRequest">
        <xs:annotation>
          <xs:documentation>The importData operation is used to move documents into an environment. Make sure to purge this environment before importing.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="importDataItem" type="keyedDocumentType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="importDataResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="importDataItem" type="keyedStanzasType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="keyQueryRequest">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="name" type="xs:string"/>
            <xs:element maxOccurs="unbounded" name="key" type="xs:string"/>
            <xs:element maxOccurs="unbounded" name="stanzaId">
              <xs:complexType>
                <xs:sequence>
                  <xs:annotation>
                    <xs:documentation>when only a domain with no accompanying
											name is provided then all the stanzas in the domain for
											the given key(s) are returned.</xs:documentation>
                  </xs:annotation>
                  <xs:element name="domain" type="xs:string"/>
                  <xs:element minOccurs="0" name="name" type="xs:string"/>
                  <xs:element minOccurs="0" name="version" type="versionType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="keyQueryResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="keyedStanzas" type="keyedStanzasType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="modifyRequest">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="modifyItem">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" name="keyAndLock">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="key" type="xs:long"/>
                        <xs:element minOccurs="0" name="optimisticLockToken" type="xs:int">
                          <xs:annotation>
                            <xs:documentation>No optimistic locking is done if no lock is provided.</xs:documentation>
                          </xs:annotation>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="stanzaId" type="stanzaIdType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="action">
                    <xs:complexType>
                      <xs:choice>
                        <xs:element name="add">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="xpath" type="xs:string"/>
                              <xs:choice>
                                <xs:annotation>
                                  <xs:documentation>Provide either a single string value to add a single element
																		or provide a complex type to add multiple elements.</xs:documentation>
                                </xs:annotation>
                                <xs:element name="value" type="xs:string"/>
                                <xs:element name="xmlValue">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:any processContents="skip"/>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                              </xs:choice>
                              <xs:element minOccurs="0" name="beforeXpath" type="xs:string"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="change">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="xpath" type="xs:string"/>
                              <xs:choice>
                                <xs:annotation>
                                  <xs:documentation>Provide either a single string value to change the value of
																		a single	element or provide a complex xml type to replace multiple elements.</xs:documentation>
                                </xs:annotation>
                                <xs:element name="value" type="xs:string"/>
                                <xs:element name="xmlValue">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:any processContents="skip"/>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                              </xs:choice>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="remove">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="xpath" type="xs:string"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:choice>
                    </xs:complexType>
                  </xs:element>
                  <xs:element minOccurs="0" name="changeContext" type="changeContextType"/>
                </xs:sequence>
                <xs:attribute name="skipUpdateNotifications" type="xs:boolean" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="modifyResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="modifyItem">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="keyedStanzas" type="keyedStanzasType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="restoreRequest">
        <xs:annotation>
          <xs:documentation>The restore request in used to restore a previous revision of a document from history to its current
						state. Requires history to be enabled for the specific stanza that we are to restore. Specify the
						specific revision number in sequenceCounter as returned from the history query for the document.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="restoreItem">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="key" type="xs:long"/>
                  <xs:element name="stanzaId">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="domain" type="xs:string"/>
                        <xs:element name="name" type="xs:string"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="sequenceCounter" type="xs:int"/>
                  <xs:element minOccurs="0" name="changeContext" type="changeContextType"/>
                </xs:sequence>
                <xs:attribute name="skipUpdateNotifications" type="xs:boolean" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="restoreResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="restoreItem" type="keyedStanzasType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="sequenceRequest">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="sequenceName" type="xs:string"/>
            <xs:element name="blockSize" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="sequenceResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="sequenceName" type="xs:string"/>
            <xs:element name="blockSize" type="xs:string"/>
            <xs:choice>
              <xs:sequence>
                <xs:element name="startSequence" type="xs:string"/>
                <xs:element name="endSequence" type="xs:string"/>
              </xs:sequence>
              <xs:sequence>
                <xs:element name="currentSequence" type="xs:string"/>
              </xs:sequence>
            </xs:choice>
            <xs:element name="startRange" type="xs:string"/>
            <xs:element name="endRange" type="xs:string"/>
            <xs:element name="wrapped" type="xs:boolean"/>
            <xs:element name="incrementBy" type="xs:string"/>
            <xs:element name="dataCenterId" type="xs:string">
              <xs:annotation>
                <xs:documentation>The ID of the data center for the CDS installation
									where the sequence generation occurred.
									Current values are: 1=CTC, 2=EDC, 3=WTC</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="availableItemRequest">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="itemName" type="xs:string"/>
            <xs:element name="blockSize" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="availableItemResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="itemName" type="xs:string"/>
            <xs:element name="dataCenterId" type="xs:string">
              <xs:annotation>
                <xs:documentation>The data center identifier for the item. Items are unique to a CDS data center installation.
									Current values are: 1=CTC, 2=EDC, 3=WTC</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="item" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="enableItemRequest">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="itemName" type="xs:string"/>
            <xs:element maxOccurs="unbounded" name="item" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="enableItemResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="domain" type="xs:string"/>
            <xs:element name="itemName" type="xs:string"/>
            <xs:element name="dataCenterId" type="xs:string">
              <xs:annotation>
                <xs:documentation>The data center identifier for the item. Items are unique to a CDS data center installation.
									Current values are: 1=CTC, 2=EDC, 3=WTC</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="enabled" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="changeContextType">
        <xs:annotation>
          <xs:documentation>Provides context about changes to documents in the CDS store. You may provide a reference to a
						userId that is responsible for the change, a reason as to why the document is being changed, and a
						custom search value that may be used in querying the history documents by.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="userId" type="xs:string"/>
          <xs:element minOccurs="0" name="reason" type="xs:string"/>
          <xs:element minOccurs="0" name="searchValue">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="30"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="effectiveDateFilterType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="history"/>
          <xs:enumeration value="current"/>
          <xs:enumeration value="future"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="indexElementType">
        <xs:sequence>
          <xs:element name="xpath" type="xs:string"/>
          <xs:element name="comparison">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="equals"/>
                <xs:enumeration value="notEquals"/>
                <xs:enumeration value="greaterThan"/>
                <xs:enumeration value="greaterThanEqual"/>
                <xs:enumeration value="lessThan"/>
                <xs:enumeration value="lessThanEqual"/>
                <xs:enumeration value="like"/>
                <xs:enumeration value="between"/>
                <xs:enumeration value="in"/>
                <xs:enumeration value="notIn"/>
                <xs:enumeration value="startsWith"/>
                <xs:enumeration value="endsWith"/>
                <xs:enumeration value="contains"/>
                <xs:enumeration value="sounds"/>
                <xs:enumeration value="isNull"/>
                <xs:enumeration value="isNotNull"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="value" type="xs:string"/>
          <xs:element minOccurs="0" name="secondaryValue" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="additionalValues" type="xs:string"/>
        </xs:sequence>
        <xs:attribute name="sort" type="sortType" use="optional"/>
        <xs:attribute name="order" type="xs:int" use="optional"/>
      </xs:complexType>
      <xs:complexType name="keyedDocumentType">
        <xs:sequence>
          <xs:element name="key" type="xs:long"/>
          <xs:any maxOccurs="unbounded" namespace="##other" processContents="skip"/>
          <xs:element minOccurs="0" name="changeContext" type="changeContextType"/>
          <xs:element minOccurs="0" name="lastUpdateDateTime" type="xs:dateTime"/>
        </xs:sequence>
        <xs:attribute name="skipUpdateNotifications" type="xs:boolean" use="optional"/>
      </xs:complexType>
      <xs:complexType name="keyedStanzasType">
        <xs:sequence>
          <xs:element name="key" type="xs:long"/>
          <xs:element maxOccurs="unbounded" name="stanza">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="domain" type="xs:string"/>
                <xs:element name="name" type="xs:string"/>
                <xs:element name="version" type="versionType"/>
                <xs:any processContents="skip"/>
                <xs:element minOccurs="0" name="lastUpdate" type="xs:dateTime"/>
                <xs:element name="optimisticLockToken" type="xs:int"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="changeContext" type="changeContextType"/>
          <xs:element minOccurs="0" name="lastUpdateDateTime" type="xs:dateTime"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="orderType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="asc"/>
          <xs:enumeration value="desc"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="pagingRequestType">
        <xs:attribute name="resultsPerPage" type="resultsPerPageType" use="required"/>
        <xs:attribute name="returnResultsCount" type="xs:boolean" use="optional"/>
        <xs:attribute name="bookmark" type="xs:string" use="optional"/>
        <xs:attribute name="order" type="orderType" use="optional"/>
      </xs:complexType>
      <xs:complexType name="pagingResponseType">
        <xs:attribute name="resultsPerPage" type="resultsPerPageType" use="required"/>
        <xs:attribute name="resultsCount" type="xs:int" use="optional"/>
        <xs:attribute name="bookmark" type="xs:string" use="required"/>
        <xs:attribute name="order" type="orderType" use="optional"/>
      </xs:complexType>
      <xs:simpleType name="resultsPerPageType">
        <xs:restriction base="xs:int">
          <xs:minInclusive value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="sortElementType">
        <xs:sequence>
          <xs:element name="xpath" type="xs:string"/>
        </xs:sequence>
        <xs:attribute name="sort" type="sortType" use="optional"/>
        <xs:attribute name="order" type="xs:int" use="optional"/>
      </xs:complexType>
      <xs:simpleType name="sortType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="asc"/>
          <xs:enumeration value="desc"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="stanzaIdType">
        <xs:sequence>
          <xs:element name="domain" type="xs:string"/>
          <xs:element name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="version" type="versionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="versionType">
        <xs:restriction base="xs:string"></xs:restriction>
      </xs:simpleType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="addRequest">
    <wsdl:part element="sch:addRequest" name="addRequest"/>
  </wsdl:message>
  <wsdl:message name="addResponse">
    <wsdl:part element="sch:addResponse" name="addResponse"/>
  </wsdl:message>
  <wsdl:message name="chainedQueryRequest">
    <wsdl:part element="sch:chainedQueryRequest" name="chainedQueryRequest"/>
  </wsdl:message>
  <wsdl:message name="chainedQueryResponse">
    <wsdl:part element="sch:chainedQueryResponse" name="chainedQueryResponse"/>
  </wsdl:message>
  <wsdl:message name="compositeRequest">
    <wsdl:part element="sch:compositeRequest" name="compositeRequest"/>
  </wsdl:message>
  <wsdl:message name="compositeResponse">
    <wsdl:part element="sch:compositeResponse" name="compositeResponse"/>
  </wsdl:message>
  <wsdl:message name="deleteRequest">
    <wsdl:part element="sch:deleteRequest" name="deleteRequest"/>
  </wsdl:message>
  <wsdl:message name="deleteResponse">
    <wsdl:part element="sch:deleteResponse" name="deleteResponse"/>
  </wsdl:message>
  <wsdl:message name="enrichedQueryRequest">
    <wsdl:part element="sch:enrichedQueryRequest" name="enrichedQueryRequest"/>
  </wsdl:message>
  <wsdl:message name="enrichedQueryResponse">
    <wsdl:part element="sch:enrichedQueryResponse" name="enrichedQueryResponse"/>
  </wsdl:message>
  <wsdl:message name="enrichedUpdateRequest">
    <wsdl:part element="sch:enrichedUpdateRequest" name="enrichedUpdateRequest"/>
  </wsdl:message>
  <wsdl:message name="enrichedUpdateResponse">
    <wsdl:part element="sch:enrichedUpdateResponse" name="enrichedUpdateResponse"/>
  </wsdl:message>
  <wsdl:message name="indexQueryRequest">
    <wsdl:part element="sch:indexQueryRequest" name="indexQueryRequest"/>
  </wsdl:message>
  <wsdl:message name="indexQueryResponse">
    <wsdl:part element="sch:indexQueryResponse" name="indexQueryResponse"/>
  </wsdl:message>
  <wsdl:message name="insertRequest">
    <wsdl:part element="sch:insertRequest" name="insertRequest"/>
  </wsdl:message>
  <wsdl:message name="insertResponse">
    <wsdl:part element="sch:insertResponse" name="insertResponse"/>
  </wsdl:message>
  <wsdl:message name="importDataRequest">
    <wsdl:part element="sch:importDataRequest" name="importDataRequest"/>
  </wsdl:message>
  <wsdl:message name="importDataResponse">
    <wsdl:part element="sch:importDataResponse" name="importDataResponse"/>
  </wsdl:message>
  <wsdl:message name="keyQueryRequest">
    <wsdl:part element="sch:keyQueryRequest" name="keyQueryRequest"/>
  </wsdl:message>
  <wsdl:message name="keyQueryResponse">
    <wsdl:part element="sch:keyQueryResponse" name="keyQueryResponse"/>
  </wsdl:message>
  <wsdl:message name="modifyRequest">
    <wsdl:part element="sch:modifyRequest" name="modifyRequest"/>
  </wsdl:message>
  <wsdl:message name="modifyResponse">
    <wsdl:part element="sch:modifyResponse" name="modifyResponse"/>
  </wsdl:message>
  <wsdl:message name="restoreRequest">
    <wsdl:part element="sch:restoreRequest" name="restoreRequest"/>
  </wsdl:message>
  <wsdl:message name="restoreResponse">
    <wsdl:part element="sch:restoreResponse" name="restoreResponse"/>
  </wsdl:message>
  <wsdl:message name="sequenceRequest">
    <wsdl:part element="sch:sequenceRequest" name="sequenceRequest"/>
  </wsdl:message>
  <wsdl:message name="sequenceResponse">
    <wsdl:part element="sch:sequenceResponse" name="sequenceResponse"/>
  </wsdl:message>
  <wsdl:message name="availableItemRequest">
    <wsdl:part element="sch:availableItemRequest" name="availableItemRequest"/>
  </wsdl:message>
  <wsdl:message name="availableItemResponse">
    <wsdl:part element="sch:availableItemResponse" name="availableItemResponse"/>
  </wsdl:message>
  <wsdl:message name="enableItemRequest">
    <wsdl:part element="sch:enableItemRequest" name="enableItemRequest"/>
  </wsdl:message>
  <wsdl:message name="enableItemResponse">
    <wsdl:part element="sch:enableItemResponse" name="enableItemResponse"/>
  </wsdl:message>
  <wsdl:message name="transferRequest"></wsdl:message>
  <wsdl:message name="transferResponse"></wsdl:message>
  <wsdl:portType name="CDS">
    <wsdl:operation name="add">
      <wsdl:input message="tns:addRequest" name="addRequest"/>
      <wsdl:output message="tns:addResponse" name="addResponse"/>
    </wsdl:operation>
    <wsdl:operation name="chainedQuery">
      <wsdl:input message="tns:chainedQueryRequest" name="chainedQueryRequest"/>
      <wsdl:output message="tns:chainedQueryResponse" name="chainedQueryResponse"/>
    </wsdl:operation>
    <wsdl:operation name="composite">
      <wsdl:input message="tns:compositeRequest" name="compositeRequest"/>
      <wsdl:output message="tns:compositeResponse" name="compositeResponse"/>
    </wsdl:operation>
    <wsdl:operation name="delete">
      <wsdl:input message="tns:deleteRequest" name="deleteRequest"/>
      <wsdl:output message="tns:deleteResponse" name="deleteResponse"/>
    </wsdl:operation>
    <wsdl:operation name="enrichedQuery">
      <wsdl:input message="tns:enrichedQueryRequest" name="enrichedQueryRequest"/>
      <wsdl:output message="tns:enrichedQueryResponse" name="enrichedQueryResponse"/>
    </wsdl:operation>
    <wsdl:operation name="enrichedUpdate">
      <wsdl:input message="tns:enrichedUpdateRequest" name="enrichedUpdateRequest"/>
      <wsdl:output message="tns:enrichedUpdateResponse" name="enrichedUpdateResponse"/>
    </wsdl:operation>
    <wsdl:operation name="indexQuery">
      <wsdl:input message="tns:indexQueryRequest" name="indexQueryRequest"/>
      <wsdl:output message="tns:indexQueryResponse" name="indexQueryResponse"/>
    </wsdl:operation>
    <wsdl:operation name="insert">
      <wsdl:input message="tns:insertRequest" name="insertRequest"/>
      <wsdl:output message="tns:insertResponse" name="insertResponse"/>
    </wsdl:operation>
    <wsdl:operation name="importData">
      <wsdl:input message="tns:importDataRequest" name="importDataRequest"/>
      <wsdl:output message="tns:importDataResponse" name="importDataResponse"/>
    </wsdl:operation>
    <wsdl:operation name="transfer">
      <wsdl:input message="tns:transferRequest" name="transferRequest"/>
      <wsdl:output message="tns:transferResponse" name="transferResponse"/>
    </wsdl:operation>
    <wsdl:operation name="keyQuery">
      <wsdl:input message="tns:keyQueryRequest" name="keyQueryRequest"/>
      <wsdl:output message="tns:keyQueryResponse" name="keyQueryResponse"/>
    </wsdl:operation>
    <wsdl:operation name="modify">
      <wsdl:input message="tns:modifyRequest" name="modifyRequest"/>
      <wsdl:output message="tns:modifyResponse" name="modifyResponse"/>
    </wsdl:operation>
    <wsdl:operation name="restore">
      <wsdl:input message="tns:restoreRequest" name="restoreRequest"/>
      <wsdl:output message="tns:restoreResponse" name="restoreResponse"/>
    </wsdl:operation>
    <wsdl:operation name="sequenceGenerator">
      <wsdl:input message="tns:sequenceRequest" name="sequenceRequest"/>
      <wsdl:output message="tns:sequenceResponse" name="sequenceResponse"/>
    </wsdl:operation>
    <wsdl:operation name="getAvailableItem">
      <wsdl:input message="tns:availableItemRequest" name="availableItemRequest"/>
      <wsdl:output message="tns:availableItemResponse" name="availableItemResponse"/>
    </wsdl:operation>
    <wsdl:operation name="enableItem">
      <wsdl:input message="tns:enableItemRequest" name="enableItemRequest"/>
      <wsdl:output message="tns:enableItemResponse" name="enableItemResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="CDSSoap11" type="tns:CDS">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="add">
      <soap:operation soapAction=""/>
      <wsdl:input name="addRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="chainedQuery">
      <soap:operation soapAction=""/>
      <wsdl:input name="chainedQueryRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="chainedQueryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="composite">
      <soap:operation soapAction=""/>
      <wsdl:input name="compositeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="compositeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delete">
      <soap:operation soapAction=""/>
      <wsdl:input name="deleteRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deleteResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="enrichedQuery">
      <soap:operation soapAction=""/>
      <wsdl:input name="enrichedQueryRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="enrichedQueryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="enrichedUpdate">
      <soap:operation soapAction=""/>
      <wsdl:input name="enrichedUpdateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="enrichedUpdateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="indexQuery">
      <soap:operation soapAction=""/>
      <wsdl:input name="indexQueryRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="indexQueryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="insert">
      <soap:operation soapAction=""/>
      <wsdl:input name="insertRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="insertResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="importData">
      <soap:operation soapAction=""/>
      <wsdl:input name="importDataRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="importDataResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="transfer">
      <soap:operation soapAction=""/>
      <wsdl:input name="transferRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="transferResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="keyQuery">
      <soap:operation soapAction=""/>
      <wsdl:input name="keyQueryRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="keyQueryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modify">
      <soap:operation soapAction=""/>
      <wsdl:input name="modifyRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="modifyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="restore">
      <soap:operation soapAction=""/>
      <wsdl:input name="restoreRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="restoreResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sequenceGenerator">
      <soap:operation soapAction=""/>
      <wsdl:input name="sequenceRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="sequenceResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAvailableItem">
      <soap:operation soapAction=""/>
      <wsdl:input name="availableItemRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="availableItemResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="enableItem">
      <soap:operation soapAction=""/>
      <wsdl:input name="enableItemRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="enableItemResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="CDSService">
    <wsdl:port binding="tns:CDSSoap11" name="CDSSoap11">
      <soap:address location="http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://cds-level1.ute.fedex.com:80/CommonDataService/clear</con:endpoint><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService2/clear</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="add" bindingOperationName="add" type="Request-Response" outputName="addResponse" inputName="addRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="afbe8f43-1be2-40ba-adbe-dc324ee26106"><con:settings/><con:call name="Request 1" id="ed66870a-122e-4b4f-ba94-3b6dc9c1d07b"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:addRequest>
         <!--1 or more repetitions:-->
         <addItem skipUpdateNotifications="?">
            <key>?</key>
            <!--You may enter ANY elements at this point-->
            <!--Optional:-->
            <changeContext>
               <!--Optional:-->
               <userId>?</userId>
               <!--Optional:-->
               <reason>?</reason>
               <!--Optional:-->
               <searchValue>?</searchValue>
            </changeContext>
         </addItem>
      </cds2:addRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/addRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="chainedQuery" bindingOperationName="chainedQuery" type="Request-Response" outputName="chainedQueryResponse" inputName="chainedQueryRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="8222fc89-dcd3-4343-8f04-0f801c6fdff8"><con:settings/><con:call name="Request 1" id="6251f510-46a4-46f4-9706-5af92cd00261"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:chainedQueryRequest>
         <!--Zero or more repetitions:-->
         <parameterSet>
            <name>?</name>
            <!--1 or more repetitions:-->
            <parameter>
               <name>?</name>
               <value>?</value>
            </parameter>
         </parameterSet>
         <!--You have a CHOICE of the next 2 items at this level-->
         <cds2:keyQueryRequest>
            <!--Optional:-->
            <name>?</name>
            <!--1 or more repetitions:-->
            <key>?</key>
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>?</domain>
               <!--Optional:-->
               <name>?</name>
               <!--Optional:-->
               <version>?</version>
            </stanzaId>
         </cds2:keyQueryRequest>
         <cds2:indexQueryRequest>
            <!--Optional:-->
            <name>?</name>
            <!--1 or more repetitions:-->
            <queryItem>
               <!--1 or more repetitions:-->
               <index effectiveDateFilter="?">
                  <stanzaId>
                     <domain>?</domain>
                     <name>?</name>
                     <!--Optional:-->
                     <version>?</version>
                  </stanzaId>
                  <!--1 or more repetitions:-->
                  <indexElement sort="?" order="?">
                     <xpath>?</xpath>
                     <comparison>?</comparison>
                     <!--Optional:-->
                     <value>?</value>
                     <!--Optional:-->
                     <secondaryValue>?</secondaryValue>
                     <!--Zero or more repetitions:-->
                     <additionalValues>?</additionalValues>
                  </indexElement>
                  <!--Zero or more repetitions:-->
                  <sortElement sort="?" order="?">
                     <xpath>?</xpath>
                  </sortElement>
               </index>
               <!--1 or more repetitions:-->
               <stanzaId>
                  <domain>?</domain>
                  <name>?</name>
                  <!--Optional:-->
                  <version>?</version>
               </stanzaId>
               <!--Optional:-->
               <paging resultsPerPage="?" returnResultsCount="?" bookmark="?" order="?"/>
            </queryItem>
         </cds2:indexQueryRequest>
         <responseQueries partialResult="?">
            <!--1 or more repetitions:-->
            <name>?</name>
         </responseQueries>
      </cds2:chainedQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/chainedQueryRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="composite" bindingOperationName="composite" type="Request-Response" outputName="compositeResponse" inputName="compositeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="9fbe8490-2350-420d-8f5a-24f8975cd147"><con:settings/><con:call name="Request 1" id="d32eaaa3-a583-409a-b6ee-54994e7fda29"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:compositeRequest>
         <!--Optional:-->
         <cds2:insertRequest>
            <!--1 or more repetitions:-->
            <insertItem skipUpdateNotifications="?">
               <!--You may enter ANY elements at this point-->
               <!--Optional:-->
               <changeContext>
                  <!--Optional:-->
                  <userId>?</userId>
                  <!--Optional:-->
                  <reason>?</reason>
                  <!--Optional:-->
                  <searchValue>?</searchValue>
               </changeContext>
            </insertItem>
         </cds2:insertRequest>
         <!--Optional:-->
         <cds2:modifyRequest>
            <!--1 or more repetitions:-->
            <modifyItem skipUpdateNotifications="?">
               <!--1 or more repetitions:-->
               <keyAndLock>
                  <key>?</key>
                  <!--Optional:-->
                  <optimisticLockToken>?</optimisticLockToken>
               </keyAndLock>
               <stanzaId>
                  <domain>?</domain>
                  <name>?</name>
                  <!--Optional:-->
                  <version>?</version>
               </stanzaId>
               <!--Zero or more repetitions:-->
               <action>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <add>
                     <xpath>?</xpath>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <value>?</value>
                     <xmlValue>
                        <!--You may enter ANY elements at this point-->
                     </xmlValue>
                     <!--Optional:-->
                     <beforeXpath>?</beforeXpath>
                  </add>
                  <change>
                     <xpath>?</xpath>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <value>?</value>
                     <xmlValue>
                        <!--You may enter ANY elements at this point-->
                     </xmlValue>
                  </change>
                  <remove>
                     <xpath>?</xpath>
                  </remove>
               </action>
               <!--Optional:-->
               <changeContext>
                  <!--Optional:-->
                  <userId>?</userId>
                  <!--Optional:-->
                  <reason>?</reason>
                  <!--Optional:-->
                  <searchValue>?</searchValue>
               </changeContext>
            </modifyItem>
         </cds2:modifyRequest>
         <!--Optional:-->
         <cds2:addRequest>
            <!--1 or more repetitions:-->
            <addItem skipUpdateNotifications="?">
               <key>?</key>
               <!--You may enter ANY elements at this point-->
               <!--Optional:-->
               <changeContext>
                  <!--Optional:-->
                  <userId>?</userId>
                  <!--Optional:-->
                  <reason>?</reason>
                  <!--Optional:-->
                  <searchValue>?</searchValue>
               </changeContext>
            </addItem>
         </cds2:addRequest>
         <!--Optional:-->
         <cds2:deleteRequest>
            <!--1 or more repetitions:-->
            <deleteItem bulkDelete="?" skipUpdateNotifications="?">
               <!--1 or more repetitions:-->
               <key>?</key>
               <!--1 or more repetitions:-->
               <stanzaId>
                  <domain>?</domain>
                  <name>?</name>
               </stanzaId>
               <!--Optional:-->
               <changeContext>
                  <!--Optional:-->
                  <userId>?</userId>
                  <!--Optional:-->
                  <reason>?</reason>
                  <!--Optional:-->
                  <searchValue>?</searchValue>
               </changeContext>
            </deleteItem>
         </cds2:deleteRequest>
         <!--Optional:-->
         <cds2:keyQueryRequest>
            <!--Optional:-->
            <name>?</name>
            <!--1 or more repetitions:-->
            <key>?</key>
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>?</domain>
               <!--Optional:-->
               <name>?</name>
               <!--Optional:-->
               <version>?</version>
            </stanzaId>
         </cds2:keyQueryRequest>
         <!--Optional:-->
         <cds2:indexQueryRequest>
            <!--Optional:-->
            <name>?</name>
            <!--1 or more repetitions:-->
            <queryItem>
               <!--1 or more repetitions:-->
               <index effectiveDateFilter="?">
                  <stanzaId>
                     <domain>?</domain>
                     <name>?</name>
                     <!--Optional:-->
                     <version>?</version>
                  </stanzaId>
                  <!--1 or more repetitions:-->
                  <indexElement sort="?" order="?">
                     <xpath>?</xpath>
                     <comparison>?</comparison>
                     <!--Optional:-->
                     <value>?</value>
                     <!--Optional:-->
                     <secondaryValue>?</secondaryValue>
                     <!--Zero or more repetitions:-->
                     <additionalValues>?</additionalValues>
                  </indexElement>
                  <!--Zero or more repetitions:-->
                  <sortElement sort="?" order="?">
                     <xpath>?</xpath>
                  </sortElement>
               </index>
               <!--1 or more repetitions:-->
               <stanzaId>
                  <domain>?</domain>
                  <name>?</name>
                  <!--Optional:-->
                  <version>?</version>
               </stanzaId>
               <!--Optional:-->
               <paging resultsPerPage="?" returnResultsCount="?" bookmark="?" order="?"/>
            </queryItem>
         </cds2:indexQueryRequest>
         <!--Optional:-->
         <cds2:enrichedQueryRequest>
            <domain>?</domain>
            <name>?</name>
            <!--You may enter ANY elements at this point-->
         </cds2:enrichedQueryRequest>
         <!--Optional:-->
         <cds2:enrichedUpdateRequest>
            <domain>?</domain>
            <name>?</name>
            <!--You may enter ANY elements at this point-->
         </cds2:enrichedUpdateRequest>
      </cds2:compositeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/compositeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="delete" bindingOperationName="delete" type="Request-Response" outputName="deleteResponse" inputName="deleteRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="1910cb56-50c5-4cc8-bc59-550dc4388097"><con:settings/><con:call name="Request 1" id="96847796-b2f7-480f-ae71-f4088f097409"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem bulkDelete="?" skipUpdateNotifications="?">
            <!--1 or more repetitions:-->
            <key>?</key>
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>?</domain>
               <name>?</name>
            </stanzaId>
            <!--Optional:-->
            <changeContext>
               <!--Optional:-->
               <userId>?</userId>
               <!--Optional:-->
               <reason>?</reason>
               <!--Optional:-->
               <searchValue>?</searchValue>
            </changeContext>
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/deleteRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="enableItem" bindingOperationName="enableItem" type="Request-Response" outputName="enableItemResponse" inputName="enableItemRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f3e729fb-05cf-4ab1-bae2-812fbee3e57d"><con:settings/><con:call name="Request 1" id="9988d267-7fdf-4a1f-b348-21d8bed0b9a3"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:enableItemRequest>
         <domain>?</domain>
         <itemName>?</itemName>
         <!--1 or more repetitions:-->
         <item>?</item>
      </cds2:enableItemRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/enableItemRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="enrichedQuery" bindingOperationName="enrichedQuery" type="Request-Response" outputName="enrichedQueryResponse" inputName="enrichedQueryRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="1bdcb8fb-487e-4e78-8c6a-0f9738322bd6"><con:settings/><con:call name="Request 1" id="a305f21a-daf7-4841-a92a-813770500ffb"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:enrichedQueryRequest>
         <domain>?</domain>
         <name>?</name>
         <!--You may enter ANY elements at this point-->
      </cds2:enrichedQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/enrichedQueryRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="enrichedUpdate" bindingOperationName="enrichedUpdate" type="Request-Response" outputName="enrichedUpdateResponse" inputName="enrichedUpdateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="dbd6637e-2e8c-4b79-b859-bcb49b5d9a11"><con:settings/><con:call name="Request 1" id="751800cf-c250-4096-9421-b3c24fc7b5b6"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:enrichedUpdateRequest>
         <domain>?</domain>
         <name>?</name>
         <!--You may enter ANY elements at this point-->
      </cds2:enrichedUpdateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/enrichedUpdateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAvailableItem" bindingOperationName="getAvailableItem" type="Request-Response" outputName="availableItemResponse" inputName="availableItemRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="67f119b9-4fdb-42c1-af92-96fe62060878"><con:settings/><con:call name="Request 1" id="a197c7d7-a533-49f2-820b-7e87df28db74"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:availableItemRequest>
         <domain>?</domain>
         <itemName>?</itemName>
         <blockSize>?</blockSize>
      </cds2:availableItemRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/availableItemRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="importData" bindingOperationName="importData" type="Request-Response" outputName="importDataResponse" inputName="importDataRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="73679abd-fbb3-4b8b-a0be-ff81e83e5268"><con:settings/><con:call name="Request 1" id="468da575-f960-4585-bd59-8353f728c391"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:importDataRequest>
         <!--1 or more repetitions:-->
         <importDataItem skipUpdateNotifications="?">
            <key>?</key>
            <!--You may enter ANY elements at this point-->
            <!--Optional:-->
            <changeContext>
               <!--Optional:-->
               <userId>?</userId>
               <!--Optional:-->
               <reason>?</reason>
               <!--Optional:-->
               <searchValue>?</searchValue>
            </changeContext>
         </importDataItem>
      </cds2:importDataRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/importDataRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="indexQuery" bindingOperationName="indexQuery" type="Request-Response" outputName="indexQueryResponse" inputName="indexQueryRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="3d4ebaa7-b7c3-4bdf-89ad-8a0fe289b205"><con:settings/><con:call name="Request 1" id="17b0dfa8-35c6-4d6b-a33c-11febb42b22f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <!--Optional:-->
         <name>?</name>
         <!--1 or more repetitions:-->
         <queryItem>
            <!--1 or more repetitions:-->
            <index effectiveDateFilter="?">
               <stanzaId>
                  <domain>?</domain>
                  <name>?</name>
                  <!--Optional:-->
                  <version>?</version>
               </stanzaId>
               <!--1 or more repetitions:-->
               <indexElement sort="?" order="?">
                  <xpath>?</xpath>
                  <comparison>?</comparison>
                  <!--Optional:-->
                  <value>?</value>
                  <!--Optional:-->
                  <secondaryValue>?</secondaryValue>
                  <!--Zero or more repetitions:-->
                  <additionalValues>?</additionalValues>
               </indexElement>
               <!--Zero or more repetitions:-->
               <sortElement sort="?" order="?">
                  <xpath>?</xpath>
               </sortElement>
            </index>
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>?</domain>
               <name>?</name>
               <!--Optional:-->
               <version>?</version>
            </stanzaId>
            <!--Optional:-->
            <paging resultsPerPage="?" returnResultsCount="?" bookmark="?" order="?"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/indexQueryRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="insert" bindingOperationName="insert" type="Request-Response" outputName="insertResponse" inputName="insertRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f3770beb-0a5e-41c9-b020-c47eba48135e"><con:settings/><con:call name="Request 1" id="c54ccedf-6b03-42f0-b678-3aea3d7c6d39"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:insertRequest>
         <!--1 or more repetitions:-->
         <insertItem skipUpdateNotifications="?">
            <!--You may enter ANY elements at this point-->
            <!--Optional:-->
            <changeContext>
               <!--Optional:-->
               <userId>?</userId>
               <!--Optional:-->
               <reason>?</reason>
               <!--Optional:-->
               <searchValue>?</searchValue>
            </changeContext>
         </insertItem>
      </cds2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/insertRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="keyQuery" bindingOperationName="keyQuery" type="Request-Response" outputName="keyQueryResponse" inputName="keyQueryRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d1ac631b-00a0-4e2a-b246-f2c264ca2a56"><con:settings/><con:call name="Request 1" id="19bcb229-0d22-4a68-81ea-88a956e5cc11"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>?</name>
         <!--1 or more repetitions:-->
         <key>?</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>?</domain>
            <!--Optional:-->
            <name>?</name>
            <!--Optional:-->
            <version>?</version>
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/keyQueryRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="modify" bindingOperationName="modify" type="Request-Response" outputName="modifyResponse" inputName="modifyRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="645c15f8-3230-4958-8490-9c938d22a0b5"><con:settings/><con:call name="Request 1" id="f30ff217-64e8-4b6d-898c-2e3c0e2d0f0a"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:modifyRequest>
         <!--1 or more repetitions:-->
         <modifyItem skipUpdateNotifications="?">
            <!--1 or more repetitions:-->
            <keyAndLock>
               <key>?</key>
               <!--Optional:-->
               <optimisticLockToken>?</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>?</domain>
               <name>?</name>
               <!--Optional:-->
               <version>?</version>
            </stanzaId>
            <!--Zero or more repetitions:-->
            <action>
               <!--You have a CHOICE of the next 3 items at this level-->
               <add>
                  <xpath>?</xpath>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <value>?</value>
                  <xmlValue>
                     <!--You may enter ANY elements at this point-->
                  </xmlValue>
                  <!--Optional:-->
                  <beforeXpath>?</beforeXpath>
               </add>
               <change>
                  <xpath>?</xpath>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <value>?</value>
                  <xmlValue>
                     <!--You may enter ANY elements at this point-->
                  </xmlValue>
               </change>
               <remove>
                  <xpath>?</xpath>
               </remove>
            </action>
            <!--Optional:-->
            <changeContext>
               <!--Optional:-->
               <userId>?</userId>
               <!--Optional:-->
               <reason>?</reason>
               <!--Optional:-->
               <searchValue>?</searchValue>
            </changeContext>
         </modifyItem>
      </cds2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/modifyRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="restore" bindingOperationName="restore" type="Request-Response" outputName="restoreResponse" inputName="restoreRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="a4e9a8e8-8875-486b-bbf5-c5e9c336a55b"><con:settings/><con:call name="Request 1" id="1fc52da7-9eb1-4f83-86fd-3b7c56a4a48f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:restoreRequest>
         <!--1 or more repetitions:-->
         <restoreItem skipUpdateNotifications="?">
            <key>?</key>
            <stanzaId>
               <domain>?</domain>
               <name>?</name>
            </stanzaId>
            <sequenceCounter>?</sequenceCounter>
            <!--Optional:-->
            <changeContext>
               <!--Optional:-->
               <userId>?</userId>
               <!--Optional:-->
               <reason>?</reason>
               <!--Optional:-->
               <searchValue>?</searchValue>
            </changeContext>
         </restoreItem>
      </cds2:restoreRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/restoreRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="sequenceGenerator" bindingOperationName="sequenceGenerator" type="Request-Response" outputName="sequenceResponse" inputName="sequenceRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="45f236c3-281c-4b3f-8e3f-c0e1073696a1"><con:settings/><con:call name="Request 1" id="8ab9a95d-1838-418c-a795-f511208094d1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header/>
   <soapenv:Body>
      <cds2:sequenceRequest>
         <domain>?</domain>
         <sequenceName>?</sequenceName>
         <blockSize>?</blockSize>
      </cds2:sequenceRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/sequenceRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="transfer" bindingOperationName="transfer" type="Request-Response" outputName="transferResponse" inputName="transferRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="4739c3cf-95bf-4e17-91b7-214717788445"><con:settings/><con:call name="Request 1" id="1a27ae39-207e-44f9-a542-38a2a807a1e6"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request>&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
   &lt;soapenv:Header/>
   &lt;soapenv:Body/>
&lt;/soapenv:Envelope></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.fedex.com/xmlns/cds2/ws/CDS/transferRequest"/></con:call></con:operation></con:interface><con:testSuite name="eTNMS_GOLDEN_TEST_SUITE" id="b9a195b5-a4a5-4052-bd7d-a9aa3a37c195"><con:settings/><con:runType>PARALLELL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MasterRange" searchProperties="true" id="488a7bd7-6e0f-4b45-b44d-3f43d46e0d16" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Verify Insert-Request-MasterRange-CDS2.0" id="cb95a8a7-91d5-4a0d-9dfa-bc1c3ce3575b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert-Request-MasterRange-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://u0007101.test.cloud.fedex.com:8080/CommonDataService/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">\r
   <soapenv:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
            <wsse:Username>${=(com.fedex.security.client.oktaauth.OktaTokenGenerator.getToken("APP4291"))}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soapenv:Header>\r
   <soapenv:Body>\r
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">\r
         <insertItem>\r
            <etnmsMasterRangeStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns="http://xmlns.fedex.com/etnms">\r
               <rangeType>EEETA</rangeType>\r
               <upperTrackingNumber>30DIGIT</upperTrackingNumber>\r
               <lowerTrackingNumber>30DIGIT</lowerTrackingNumber>\r
            </etnmsMasterRangeStanza>\r
         </insertItem>\r
      </ns2:insertRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="2fd39863-4a49-4763-a56f-c829d2599dec"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsMasterRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("MasterRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EEETA"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="30DIGIT"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="30DIGIT"



counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify duplicate stanza error is not present for - MasterRange - CDS 2.0" id="77d845b3-9c82-43a0-9680-784a4c41ad56"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify duplicate stanza error is not present for - MasterRange - CDS 2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsMasterRangeStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns="http://xmlns.fedex.com/etnms">
               <rangeType>EEETA</rangeType>
               <upperTrackingNumber>30DIGIT</upperTrackingNumber>
               <lowerTrackingNumber>30DIGIT</lowerTrackingNumber>
            </etnmsMasterRangeStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="4b6e6bbb-2bd2-4489-ac8a-764066ad35ad"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())

assert allRecords.text()!="DuplicateStanza"

xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("duplicateKey",key)
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Delete duplicateStanzaTC  key - MasterRange - CDS 2.0" id="99390376-51d3-4e32-ae59-0eee9ebf3aaa"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Delete duplicateStanzaTC  key - MasterRange - CDS 2.0" id="a8d95b20-6214-45ad-a6ef-6ce189bb5ce2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#duplicateKey}</key>
<!--            <key>1640005700727100228</key>-->
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsMasterRangeStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="88ec3251-8ffe-4ae9-be0f-c2f0ba8656a9"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="864a1d61-8979-4958-9e80-acf04e33c474" disabled="true"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsMasterRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def MasterRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyMasterRangeKey")
assert key==MasterRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteMasterRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EASS"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999999"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999999"

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery -Request-MasterRange-CDS2.0" id="c8e2bcfd-9b2f-43c6-8ff0-1088c1488f03"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery -Request-MasterRange-CDS2.0" id="3a8359dd-145d-406a-98cb-ea287a50e8e5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsMasterRangeStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#MasterRangeKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsMasterRangeStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9ecdcc89-8b59-47d3-b590-c63896676c92"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a7f50369-3948-4b32-a33d-9428f0e96898"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsMasterRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def MasterRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("MasterRangeKey")
assert key==MasterRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyMasterRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EEETA"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="30DIGIT"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="30DIGIT"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5589259b-4aec-4df3-842f-b54805e557a1"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index After Insert -Request-MasterRange-CDS2.0" id="a2bb25c8-4365-4712-b68a-fbf2f3295f47"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index After Insert -Request-MasterRange-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2"> 
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header> 
   <soapenv:Body> 
      <cds2:indexQueryRequest> 
         <queryItem> 
            <index> 
               <stanzaId> 
                  <domain>etnms</domain> 
                  <name>etnmsMasterRangeStanza</name> 
                  <version>1</version> 
               </stanzaId> 
               <indexElement> 
                  <xpath>/etnmsMasterRangeStanza/rangeType</xpath> 
                  <comparison>equals</comparison> 
                  <value>EEETA</value> 
               </indexElement> 
            </index> 
            <stanzaId> 
               <domain>etnms</domain> 
               <name>etnmsMasterRangeStanza</name> 
            </stanzaId> 
            <paging bookmark="" resultsPerPage="25" order ="asc"/> 
         </queryItem> 
      </cds2:indexQueryRequest> 
   </soapenv:Body> 
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsMasterRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def MasterRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("MasterRangeKey")
assert key==MasterRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("indexMasterRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EEETA"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="30DIGIT"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="30DIGIT"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify - Request-Change-MasterRange-CDS2.0" id="1fd7eb60-5ee1-4e81-954c-b96326015e2d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify - Request-Change-MasterRange-CDS2.0" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
               <key>${#TestCase#MasterRangeKey}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsMasterRangeStanza</name>
            </stanzaId>
            <action>
               <change>
                  <xpath>/etnmsMasterRangeStanza/rangeType</xpath>
                  <value>EASS</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsMasterRangeStanza/upperTrackingNumber</xpath>
                  <value>0239999999</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsMasterRangeStanza/lowerTrackingNumber</xpath>
                  <value>0239999999</value>
               </change>
            </action>
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsMasterRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def indexDetailKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("indexMasterRangeKey")
assert key== indexDetailKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("modifyMasterRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EASS"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999999"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999999"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="9e2e0723-f7ac-4696-a1b7-850bad49f262"><con:settings/><con:config><delay>12000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details-MasterRange-CDS2.0" id="a54c88fd-9584-47d9-ac03-800ae6aff49c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details-MasterRange-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2"> 
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header> 
   <soapenv:Body> 
      <cds2:indexQueryRequest> 
         <queryItem> 
            <index> 
               <stanzaId> 
                  <domain>etnms</domain> 
                  <name>etnmsMasterRangeStanza</name> 
                  <version>1</version> 
               </stanzaId> 
               <indexElement> 
                  <xpath>/etnmsMasterRangeStanza/rangeType</xpath> 
                  <comparison>equals</comparison> 
                  <value>EASS</value> 
               </indexElement> 
            </index> 
            <stanzaId> 
               <domain>etnms</domain> 
               <name>etnmsMasterRangeStanza</name> 
            </stanzaId> 
            <paging bookmark="" resultsPerPage="25"/> 
         </queryItem> 
      </cds2:indexQueryRequest> 
   </soapenv:Body> 
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsMasterRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def MasterRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("modifyMasterRangeKey")
assert key==MasterRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterModifyMasterRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EASS"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999999"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999999"

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete-Request- MasterRange-CDS2.0" id="a9d8d01b-9daa-42d4-8ea9-39f0c4b20247"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete-Request- MasterRange-CDS2.0" id="a8d95b20-6214-45ad-a6ef-6ce189bb5ce2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#MasterRangeKey}</key>
<!--            <key>1641825644182100226</key>-->
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsMasterRangeStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="88ec3251-8ffe-4ae9-be0f-c2f0ba8656a9"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="864a1d61-8979-4958-9e80-acf04e33c474"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsMasterRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def MasterRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyMasterRangeKey")
//assert key==MasterRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteMasterRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EASS"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999999"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999999"

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-AfterDelete-Request-MasterRange-CDS2.0" id="161ba7da-206d-42a8-8570-3626c0a92f56"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-AfterDelete-Request-MasterRange-CDS2.0" id="98c2e644-4fc9-40c0-88ae-588e1e7ebc1e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsMasterRangeStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeleteMasterRangeKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsMasterRangeStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="50c59db9-b32c-424f-8eac-79838e8076cb"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="37374c9d-ccbf-4cb2-9573-f42311a77313"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsMasterRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() == 0</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>MasterRangeKey</con:name><con:value>1641997523470100227</con:value></con:property><con:property><con:name>KeyMasterRangeKey</con:name><con:value>1641997523470100227</con:value></con:property><con:property><con:name>indexMasterRangeKey</con:name><con:value>1641997523470100227</con:value></con:property><con:property><con:name>modifyMasterRangeKey</con:name><con:value>1641997523470100227</con:value></con:property><con:property><con:name>AfterModifyMasterRangeKey</con:name><con:value>1641997523470100227</con:value></con:property><con:property><con:name>DeleteMasterRangeKey</con:name><con:value>1641997523470100227</con:value></con:property><con:property><con:name>duplicateKey</con:name><con:value>1641997523471100223</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MasterSubRange" searchProperties="true" id="00064866-f4a1-4f8e-92a8-33a4b6ac6b3a" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Verify Insert-Request-MasterSubRange- CDS2.0" id="beb2d385-4ea7-496a-b7ab-c7a6886b2937"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert-Request-MasterSubRange- CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsMasterSubRangeStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns="http://xmlns.fedex.com/etnms">
               <rangeType>FTTA</rangeType>
               <lowerTrackingNumber>0239999984</lowerTrackingNumber>
               <upperTrackingNumber>0239999984</upperTrackingNumber>
               <lastAllocatedTrackingNumberBegin>0232266797</lastAllocatedTrackingNumberBegin>
               <lastAllocatedTrackingNumberEnd>0239999999</lastAllocatedTrackingNumberEnd>
               <statusCode>ACTIVE</statusCode>
               <statusChangeDate>2021-01-28T04:23:22.471Z</statusChangeDate>
               <createDate>2013-09-24T16:29:18.092Z</createDate>
            </etnmsMasterSubRangeStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="14d3ab65-14cf-4d2f-ac5e-3b5899b30774"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsMasterSubRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("MasterSubRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="FTTA"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999984"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999984"

def lastAllocatedTrackingNumberBegin = singleRecord.lastAllocatedTrackingNumberBegin.text()
log.info("lastAllocatedTrackingNumberBegin = " +lastAllocatedTrackingNumberBegin)
assert lastAllocatedTrackingNumberBegin =="0232266797"


def lastAllocatedTrackingNumberEnd = singleRecord.lastAllocatedTrackingNumberEnd.text()
log.info("lastAllocatedTrackingNumberEnd = " +lastAllocatedTrackingNumberEnd)
assert lastAllocatedTrackingNumberEnd =="0239999999"


def statusCode = singleRecord.statusCode.text()
log.info("statusCode = " +statusCode)
assert statusCode =="ACTIVE"

def statusChangeDate = singleRecord.statusChangeDate.text()
log.info("statusChangeDate = " +statusChangeDate)
assert statusChangeDate =="2021-01-28T04:23:22.471Z"


def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2013-09-24T16:29:18.092Z"

counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Duplicate stanza error for Insert endpoint  -MasterSubRange - CDS 2.0" id="99cba05c-0005-49ef-b6d0-92f0485a672f" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Duplicate stanza error for Insert endpoint  -MasterSubRange - CDS 2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsMasterSubRangeStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns="http://xmlns.fedex.com/etnms">
               <rangeType>FTTA</rangeType>
               <lowerTrackingNumber>0239999984</lowerTrackingNumber>
               <upperTrackingNumber>0239999984</upperTrackingNumber>
               <lastAllocatedTrackingNumberBegin>0232266797</lastAllocatedTrackingNumberBegin>
               <lastAllocatedTrackingNumberEnd>0239999999</lastAllocatedTrackingNumberEnd>
               <statusCode>ACTIVE</statusCode>
               <statusChangeDate>2021-01-28T04:23:22.471Z</statusChangeDate>
               <createDate>2013-09-24T16:29:18.092Z</createDate>
            </etnmsMasterSubRangeStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3b82b140-fc52-4ad4-af65-99928a6949fe"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())

assert allRecords.text()=="DuplicateStanza"


//assert allRecords.text()!="DuplicateStanza"
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-Request-MasterSubRange-CDS2.0" id="06e7cea6-4337-497d-b056-6635c642dbb6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-Request-MasterSubRange-CDS2.0" id="6076c6f5-596a-4913-a600-4ea557806664"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsMasterSubRangeStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#MasterSubRangeKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsMasterSubRangeStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="43bfb351-1000-4b8d-8b0a-177d941e3508"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="4cc19572-9e71-42af-a57d-d370c46375a0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsMasterSubRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def MasterSubRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("MasterSubRangeKey")
assert key==MasterSubRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyMasterSubRangeKey",key)
}

def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="FTTA"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999984"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999984"

def lastAllocatedTrackingNumberBegin = singleRecord.lastAllocatedTrackingNumberBegin.text()
log.info("lastAllocatedTrackingNumberBegin = " +lastAllocatedTrackingNumberBegin)
assert lastAllocatedTrackingNumberBegin =="0232266797"


def lastAllocatedTrackingNumberEnd = singleRecord.lastAllocatedTrackingNumberEnd.text()
log.info("lastAllocatedTrackingNumberEnd = " +lastAllocatedTrackingNumberEnd)
assert lastAllocatedTrackingNumberEnd =="0239999999"


def statusCode = singleRecord.statusCode.text()
log.info("statusCode = " +statusCode)
assert statusCode =="ACTIVE"

def statusChangeDate = singleRecord.statusChangeDate.text()
log.info("statusChangeDate = " +statusChangeDate)
assert statusChangeDate =="2021-01-28T04:23:22.471Z"


def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2013-09-24T16:29:18.092Z"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="7dc7ba2b-db8e-4bed-b1d3-484cc9769942"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index-Request-MasterSubRange-CDS2.0" id="bf6ed51d-d787-4e76-8775-25042cda1b6b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index-Request-MasterSubRange-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2"> 
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header> 
   <soapenv:Body> 
      <cds2:indexQueryRequest> 
         <queryItem> 
            <index> 
               <stanzaId> 
                  <domain>etnms</domain> 
                  <name>etnmsMasterSubRangeStanza</name> 
                  <version>1</version> 
               </stanzaId> 
                <indexElement> 
                  <xpath>/etnmsMasterSubRangeStanza/rangeType</xpath> 
                  <comparison>equals</comparison> 
                  <value>FTTA</value> 
               </indexElement> 
            </index> 
            <stanzaId> 
               <domain>etnms</domain> 
               <name>etnmsMasterSubRangeStanza</name> 
            </stanzaId> 
            <paging bookmark="" resultsPerPage="25"/> 
         </queryItem> 
      </cds2:indexQueryRequest> 
   </soapenv:Body> 
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsMasterSubRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def MasterSubRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("MasterSubRangeKey")
assert key==MasterSubRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("indexMasterSubRangeKey",key)
}

def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="FTTA"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999984"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999984"

def lastAllocatedTrackingNumberBegin = singleRecord.lastAllocatedTrackingNumberBegin.text()
log.info("lastAllocatedTrackingNumberBegin = " +lastAllocatedTrackingNumberBegin)
assert lastAllocatedTrackingNumberBegin =="0232266797"


def lastAllocatedTrackingNumberEnd = singleRecord.lastAllocatedTrackingNumberEnd.text()
log.info("lastAllocatedTrackingNumberEnd = " +lastAllocatedTrackingNumberEnd)
assert lastAllocatedTrackingNumberEnd =="0239999999"


def statusCode = singleRecord.statusCode.text()
log.info("statusCode = " +statusCode)
assert statusCode =="ACTIVE"

def statusChangeDate = singleRecord.statusChangeDate.text()
log.info("statusChangeDate = " +statusChangeDate)
assert statusChangeDate =="2021-01-28T04:23:22.471Z"


def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2013-09-24T16:29:18.092Z"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify-Request-Change-MasterSubRange-CDS2.0" id="eec330c9-578c-4662-95aa-dc60b8b8ce21"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify-Request-Change-MasterSubRange-CDS2.0" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
               <key>${#TestCase#indexMasterSubRangeKey}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsMasterSubRangeStanza</name>
            </stanzaId>
            <action>
               <change>
                  <xpath>/etnmsMasterSubRangeStanza/rangeType</xpath>
                  <value>RETE</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsMasterSubRangeStanza/lowerTrackingNumber</xpath>
                  <value>0239999990</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsMasterSubRangeStanza/upperTrackingNumber</xpath>
                  <value>0239999999</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsMasterSubRangeStanza/lastAllocatedTrackingNumberBegin</xpath>
                  <value>0239999998</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsMasterSubRangeStanza/lastAllocatedTrackingNumberEnd</xpath>
                  <value>0239999997</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsMasterSubRangeStanza/statusCode</xpath>
                  <value>RESERVED</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsMasterSubRangeStanza/statusChangeDate</xpath>
                  <value>2021-08-16T04:23:22.471Z</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsMasterSubRangeStanza/createDate</xpath>
                  <value>2021-08-16T04:23:22.471Z</value>
               </change>
            </action>
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsMasterSubRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def indexDetailKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("indexMasterSubRangeKey")
assert key== indexDetailKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("modifyMasterSubRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="RETE"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999999"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999990"

def lastAllocatedTrackingNumberBegin = singleRecord.lastAllocatedTrackingNumberBegin.text()
log.info("lastAllocatedTrackingNumberBegin = " +lastAllocatedTrackingNumberBegin)
assert lastAllocatedTrackingNumberBegin =="0239999998"


def lastAllocatedTrackingNumberEnd = singleRecord.lastAllocatedTrackingNumberEnd.text()
log.info("lastAllocatedTrackingNumberEnd = " +lastAllocatedTrackingNumberEnd)
assert lastAllocatedTrackingNumberEnd =="0239999997"


def statusCode = singleRecord.statusCode.text()
log.info("statusCode = " +statusCode)
assert statusCode =="RESERVED"

def statusChangeDate = singleRecord.statusChangeDate.text()
log.info("statusChangeDate = " +statusChangeDate)
assert statusChangeDate =="2021-08-16T04:23:22.471Z"


def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2021-08-16T04:23:22.471Z"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="77751f76-39ff-4537-98dd-00a551b02051"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details - MasterSubRange-CDS2.0" id="3d7fe5a8-c1dd-4da1-b0bf-0f85bd0140f5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details - MasterSubRange-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsMasterSubRangeStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsMasterSubRangeStanza/rangeType</xpath>
                  <comparison>equals</comparison>
                  <value>RETE</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsMasterSubRangeStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsMasterSubRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def MasterSubRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("modifyMasterSubRangeKey")
assert key==MasterSubRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterModifyMasterSubRangeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="RETE"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999999"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999990"

def lastAllocatedTrackingNumberBegin = singleRecord.lastAllocatedTrackingNumberBegin.text()
log.info("lastAllocatedTrackingNumberBegin = " +lastAllocatedTrackingNumberBegin)
assert lastAllocatedTrackingNumberBegin =="0239999998"


def lastAllocatedTrackingNumberEnd = singleRecord.lastAllocatedTrackingNumberEnd.text()
log.info("lastAllocatedTrackingNumberEnd = " +lastAllocatedTrackingNumberEnd)
assert lastAllocatedTrackingNumberEnd =="0239999997"


def statusCode = singleRecord.statusCode.text()
log.info("statusCode = " +statusCode)
assert statusCode =="RESERVED"

def statusChangeDate = singleRecord.statusChangeDate.text()
log.info("statusChangeDate = " +statusChangeDate)
assert statusChangeDate =="2021-08-16T04:23:22.471Z"


def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2021-08-16T04:23:22.471Z"

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete-Request- MasterSubRange-CDS2.0" id="7f27851c-51fc-46ae-86b5-24b31950fc71"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete-Request- MasterSubRange-CDS2.0" id="ae834b40-dbc5-44d0-8fba-f173f0922f34"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
             <key>${#TestCase#MasterSubRangeKey}</key>
<!--            <key>1640599827821100221</key>-->
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsMasterSubRangeStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e87764f8-494d-41fb-9148-27c3e2bba76f"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="d5f23a99-a7d9-4018-b615-1ce41eba991f"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsMasterSubRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def MasterSubRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyMasterSubRangeKey")
//assert key==MasterSubRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteMasterSubRangeKey", key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="RETE"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999999"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999990"

def lastAllocatedTrackingNumberBegin = singleRecord.lastAllocatedTrackingNumberBegin.text()
log.info("lastAllocatedTrackingNumberBegin = " +lastAllocatedTrackingNumberBegin)
assert lastAllocatedTrackingNumberBegin =="0239999998"


def lastAllocatedTrackingNumberEnd = singleRecord.lastAllocatedTrackingNumberEnd.text()
log.info("lastAllocatedTrackingNumberEnd = " +lastAllocatedTrackingNumberEnd)
assert lastAllocatedTrackingNumberEnd =="0239999997"


def statusCode = singleRecord.statusCode.text()
log.info("statusCode = " +statusCode)
assert statusCode =="RESERVED"

def statusChangeDate = singleRecord.statusChangeDate.text()
log.info("statusChangeDate = " +statusChangeDate)
assert statusChangeDate =="2021-08-16T04:23:22.471Z"


def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2021-08-16T04:23:22.471Z"

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-AfterDelete-Request-MasterSubRange-CDS2.0" id="0ecb511d-980d-4344-a37c-849a92edbf57"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-AfterDelete-Request-MasterSubRange-CDS2.0" id="b0d5ccec-6dfc-44ed-9d75-a9104a6fa552"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsMasterSubRangeStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeleteMasterSubRangeKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsMasterSubRangeStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a819cf7e-d4e7-46e8-8fb5-eb5799a07e55"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a1cb25ac-221e-4c83-9662-972cd80d07f2"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsMasterSubRangeStanza
log.info("all Records size = " + allRecords.size())

counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def MasterSubRangeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("MasterSubRangeKey")
assert key==MasterSubRangeKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyMasterSubRangeKey",key)
}

def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="FTTA"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="0239999984"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="0239999984"

def lastAllocatedTrackingNumberBegin = singleRecord.lastAllocatedTrackingNumberBegin.text()
log.info("lastAllocatedTrackingNumberBegin = " +lastAllocatedTrackingNumberBegin)
assert lastAllocatedTrackingNumberBegin =="0232266797"


def lastAllocatedTrackingNumberEnd = singleRecord.lastAllocatedTrackingNumberEnd.text()
log.info("lastAllocatedTrackingNumberEnd = " +lastAllocatedTrackingNumberEnd)
assert lastAllocatedTrackingNumberEnd =="0239999999"


def statusCode = singleRecord.statusCode.text()
log.info("statusCode = " +statusCode)
assert statusCode =="ACTIVE"

def statusChangeDate = singleRecord.statusChangeDate.text()
log.info("statusChangeDate = " +statusChangeDate)
assert statusChangeDate =="2021-01-28T04:23:22.471Z"


def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2013-09-24T16:29:18.092Z"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>MasterSubRangeKey</con:name><con:value>1641997523471100225</con:value></con:property><con:property><con:name>KeyMasterSubRangeKey</con:name><con:value>1641997523471100225</con:value></con:property><con:property><con:name>indexMasterSubRangeKey</con:name><con:value>1641997523471100225</con:value></con:property><con:property><con:name>modifyMasterSubRangeKey</con:name><con:value>1641997523471100225</con:value></con:property><con:property><con:name>DeleteMasterSubRangeKey</con:name><con:value>1641997523471100225</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceType" searchProperties="true" id="9c8ebe42-6724-4680-a10d-02e893674836" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Verify Insert- Request- DeviceType - CDS2.0" id="df402b38-abf2-474f-9e6d-49cddadb3d2b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert- Request- DeviceType - CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2"> 
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header> 
   <soapenv:Body> 
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2"> 
         <insertItem> 
            <etnmsDeviceTypeStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns="http://xmlns.fedex.com/etnms" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 
               <rangeType>IATA</rangeType> 
               <deviceType>15</deviceType> 
               <deviceTypeDescription>Freighter</deviceTypeDescription> 
               <createDate>2021-05-04T18:13:51.0Z</createDate> 
            </etnmsDeviceTypeStanza> 
         </insertItem> 
      </ns2:insertRequest> 
   </soapenv:Body> 
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="533327c2-1812-43bf-9ce1-99b7366fd842"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsDeviceTypeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("DeviceTypeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="IATA"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="15"

def deviceTypeDescription = singleRecord.deviceTypeDescription.text()
log.info("deviceTypeDescription = " +deviceTypeDescription)
assert deviceTypeDescription =="Freighter"

def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2021-05-04T18:13:51.0Z"



counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Duplicate stanza error for Insert endpoint - DeviceType - CDS 2.0" id="a5132ccd-48ac-4a2b-b6be-449c5d584bcb" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Duplicate stanza error for Insert endpoint - DeviceType - CDS 2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2"> 
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header> 
   <soapenv:Body> 
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2"> 
         <insertItem> 
            <etnmsDeviceTypeStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns="http://xmlns.fedex.com/etnms" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 
               <rangeType>IATA</rangeType> 
               <deviceType>15</deviceType> 
               <deviceTypeDescription>Freighter</deviceTypeDescription> 
               <createDate>2021-05-04T18:13:51.0Z</createDate> 
            </etnmsDeviceTypeStanza> 
         </insertItem> 
      </ns2:insertRequest> 
   </soapenv:Body> 
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="eea01ea2-6d22-4db3-888e-7400172476d3"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())

assert allRecords.text()=="DuplicateStanza"


//assert allRecords.text()!="DuplicateStanza"
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-Request-DeviceType-CDS2.0" id="7104ce8b-727c-46a1-9a46-be3855045f2a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-Request-DeviceType-CDS2.0" id="97c0bb74-dca9-4f94-94a9-65963b88d332"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsDeviceTypeStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeviceTypeKey}</key>
         <!--1 or more repetitions:-->
<!--         <key>1638868884938100228</key>-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsDeviceTypeStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="77dcb1d5-739c-4add-958b-dea6dac15d36"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="cef82cee-b7a4-4583-a2e7-9ef4935f7005"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsDeviceTypeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def DeviceTypeStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("DeviceTypeKey")
assert key==DeviceTypeStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyDeviceTypeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="IATA"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="15"

def deviceTypeDescription = singleRecord.deviceTypeDescription.text()
log.info("deviceTypeDescription = " +deviceTypeDescription)
assert deviceTypeDescription =="Freighter"

def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2021-05-04T18:13:51.0Z"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="b7cec4d0-391d-48c3-8f3a-d7cf948f6245"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index-Request-DeviceTypeStanza-CDS2.0" id="0748772d-da39-4d45-abf0-fa54849feec8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index-Request-DeviceTypeStanza-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsDeviceTypeStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsDeviceTypeStanza/deviceType</xpath>
                  <comparison>equals</comparison>
                  <value>15</value>
               </indexElement>
               <!--<indexElement>-->
               <!--<xpath>/etnmsDeviceTypeStanza/deviceTypeDescription</xpath>-->
               <!--<comparison>equals</comparison>-->
               <!--<value>Freighter</value>-->
               <!--</indexElement>-->
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsDeviceTypeStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsDeviceTypeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def DeviceTypeStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("DeviceTypeKey")
assert key==DeviceTypeStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("indexDeviceTypeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="IATA"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="15"

def deviceTypeDescription = singleRecord.deviceTypeDescription.text()
log.info("deviceTypeDescription = " +deviceTypeDescription)
assert deviceTypeDescription =="Freighter"

def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2021-05-04T18:13:51.0Z"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify-Request-Change-DeviceType- CDS2.0" id="a8ac83b4-5dc8-4e6e-b5f7-4d4ff1b0a724"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify-Request-Change-DeviceType- CDS2.0" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
               <key>${#TestCase#indexDeviceTypeKey}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsDeviceTypeStanza</name>
            </stanzaId>
            <action>
               <change>
                  <xpath>/etnmsDeviceTypeStanza/rangeType</xpath>
                  <value>EASS</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsDeviceTypeStanza/deviceType</xpath>
                  <value>16</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsDeviceTypeStanza/deviceTypeDescription</xpath>
                  <value>FRIEGHTS</value>
               </change>
            </action>
             <action>
               <change>
                  <xpath>/etnmsDeviceTypeStanza/createDate</xpath>
                  <value>2021-08-04T18:13:51.0Z</value>
               </change>
            </action>
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsDeviceTypeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def indexDetailKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("indexDeviceTypeKey")
assert key== indexDetailKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("ModifyDeviceTypeKey",key)
}

def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EASS"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def deviceTypeDescription = singleRecord.deviceTypeDescription.text()
log.info("deviceTypeDescription = " +deviceTypeDescription)
assert deviceTypeDescription =="FRIEGHTS"

def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2021-08-04T18:13:51.0Z"



counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="cf9c4d24-95fd-4245-8bd7-7a1144e22a9a"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details -DeviceTypeStanza-CDS2.0" id="656e0a43-8ab5-428e-b453-95bc53f2fac8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details -DeviceTypeStanza-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2"> 
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header> 
   <soapenv:Body> 
      <cds2:indexQueryRequest> 
         <queryItem> 
            <index> 
               <stanzaId> 
                  <domain>etnms</domain> 
                  <name>etnmsDeviceTypeStanza</name> 
                  <version>1</version> 
               </stanzaId> 
<!--               <indexElement> -->
<!--                  <xpath>/etnmsDeviceTypeStanza/deviceType</xpath> -->
<!--                  <comparison>equals</comparison> -->
<!--                  <value>16</value> -->
<!--               </indexElement> -->
               <indexElement> 
                  <xpath>/etnmsDeviceTypeStanza/deviceTypeDescription</xpath> 
                  <comparison>equals</comparison> 
                  <value>FRIEGHTS</value> 
               </indexElement> 
            </index> 
            <stanzaId> 
               <domain>etnms</domain> 
               <name>etnmsDeviceTypeStanza</name> 
            </stanzaId> 
            <paging bookmark="" resultsPerPage="25"/> 
         </queryItem> 
      </cds2:indexQueryRequest> 
   </soapenv:Body> 
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsDeviceTypeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def DeviceTypeStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("DeviceTypeKey")
assert key==DeviceTypeStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterModifyDeviceTypeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EASS"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def deviceTypeDescription = singleRecord.deviceTypeDescription.text()
log.info("deviceTypeDescription = " +deviceTypeDescription)
assert deviceTypeDescription =="FRIEGHTS"

def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2021-08-04T18:13:51.0Z"



counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete- Request- DeviceType- CDS2.0" id="ecb61642-3668-444c-92f7-b969241844d3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete- Request- DeviceType- CDS2.0" id="16101269-88b6-4910-a012-fd9ff1e1f28b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#AfterModifyDeviceTypeKey}</key>
<!--            <key>1640599827820100229</key>-->
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsDeviceTypeStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="cc03c2b8-2d31-428b-bf54-6581183d1880"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="10b6e9ec-1011-494e-b083-84f09dfc518c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsDeviceTypeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def DeviceTypeKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyDeviceTypeKey")
assert key==DeviceTypeKey

messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteDeviceTypeKey",key)
}
def rangeType = singleRecord.rangeType.text()
log.info("rangeType = " +rangeType)
assert rangeType =="EASS"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def deviceTypeDescription = singleRecord.deviceTypeDescription.text()
log.info("deviceTypeDescription = " +deviceTypeDescription)
assert deviceTypeDescription =="FRIEGHTS"

def createDate = singleRecord.createDate.text()
log.info("createDate = " +createDate)
assert createDate =="2021-08-04T18:13:51.0Z"

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-AfterDelete-Request-DeviceType-CDS2.0" id="6a6bd77b-9114-46ed-a44b-9d65b0cf737a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-AfterDelete-Request-DeviceType-CDS2.0" id="3bd9623a-2baa-4785-80d6-6f4d567d4bac"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsDeviceTypeStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeleteDeviceTypeKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsDeviceTypeStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3cc2c23e-c6b0-409d-991a-1bb8451d0277"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a62f1886-c20d-4a12-ad37-77eb85ab9a7b"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsDeviceTypeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() == 0</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DeviceTypeKey</con:name><con:value>1641997523469100229</con:value></con:property><con:property><con:name>KeyDeviceTypeKey</con:name><con:value>1641997523469100229</con:value></con:property><con:property><con:name>indexDeviceTypeKey</con:name><con:value>1641997523469100229</con:value></con:property><con:property><con:name>ModifyDeviceTypeKey</con:name><con:value>1641997523469100229</con:value></con:property><con:property><con:name>AfterModifyDeviceTypeKey</con:name><con:value>1641997523469100229</con:value></con:property><con:property><con:name>DeleteDeviceTypeKey</con:name><con:value>1641997523469100229</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceContactInformation" searchProperties="true" id="10347dd8-9e68-4b40-b2d0-7b2cd313ffe2" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Verify Insert-DeviceContactInformationStanza-CDS2.0" id="f3849cd4-3655-4a7e-aabc-c1d938aaebad"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert-DeviceContactInformationStanza-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsDeviceContactInformationStanza:etnmsDeviceContactInformationStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsDeviceContactInformationStanza="http://xmlns.fedex.com/etnms" xmlns="http://xmlns.fedex.com/etnms">
               <etnmsDeviceContactInformationStanza:deviceID deviceSoftwareVersion="2.0">000012311</etnmsDeviceContactInformationStanza:deviceID>
               <etnmsDeviceContactInformationStanza:deviceType>1</etnmsDeviceContactInformationStanza:deviceType>
               <etnmsDeviceContactInformationStanza:contactType>DEVICE</etnmsDeviceContactInformationStanza:contactType>
               <etnmsDeviceContactInformationStanza:contactInformation email="johndoe@testcompany.com" name="John Doe" phoneNumber="555-555-5555"/>
            </etnmsDeviceContactInformationStanza:etnmsDeviceContactInformationStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="30005f08-076f-4420-9986-fdc3c75a3f96"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsDeviceContactInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("DeviceContactInformationKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012311"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def contactType = singleRecord.contactType.text()
log.info("contactType = " +contactType)
assert contactType =="DEVICE"

xml.Body.insertResponse.insertItem.stanza.etnmsDeviceContactInformationStanza.contactInformation.find{contactInformation->
def email = contactInformation.@email.text()
log.info(email)
def name = contactInformation.@name.text()
def phoneNumber =contactInformation.@phoneNumber.text()
assert email == "johndoe@testcompany.com"
assert name == "John Doe"
assert  phoneNumber == "555-555-5555"
}





counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Duplicate stanza error for Insert endpoint - DeviceContactInformation - CDS 2.0" id="ac97c9eb-dfa0-4837-b8ba-c8b4b3e052c9" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Duplicate stanza error for Insert endpoint - DeviceContactInformation - CDS 2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsDeviceContactInformationStanza:etnmsDeviceContactInformationStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsDeviceContactInformationStanza="http://xmlns.fedex.com/etnms" xmlns="http://xmlns.fedex.com/etnms">
               <etnmsDeviceContactInformationStanza:deviceID deviceSoftwareVersion="2.0">000012311</etnmsDeviceContactInformationStanza:deviceID>
               <etnmsDeviceContactInformationStanza:deviceType>1</etnmsDeviceContactInformationStanza:deviceType>
               <etnmsDeviceContactInformationStanza:contactType>DEVICE</etnmsDeviceContactInformationStanza:contactType>
               <etnmsDeviceContactInformationStanza:contactInformation email="johndoe@testcompany.com" name="John Doe" phoneNumber="555-555-5555"/>
            </etnmsDeviceContactInformationStanza:etnmsDeviceContactInformationStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="43054a9d-dded-4bc4-a6e8-99bb19a2485b"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())

assert allRecords.text()=="DuplicateStanza"


//assert allRecords.text()!="DuplicateStanza"
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-Request-DeviceContactInformationStanza" id="da8b9e48-f069-41dd-9dec-76f418c3afa2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-Request-DeviceContactInformationStanza" id="f85fe930-5a99-499b-9c94-1cc8f06959fd"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsDeviceContactInformationStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeviceContactInformationKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsDeviceContactInformationStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="df169c29-0fa3-4257-94ab-02718c2c8e9b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="84e51348-b497-4211-82cc-b4b048975e0c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsDeviceContactInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def DeviceContactInformationKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("DeviceContactInformationKey")
assert key==DeviceContactInformationKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyDeviceContactInformationKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012311"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def contactType = singleRecord.contactType.text()
log.info("contactType = " +contactType)
assert contactType =="DEVICE"


xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsDeviceContactInformationStanza.contactInformation.find{contactInformation->
def email = contactInformation.@email.text()
log.info(email)
def name = contactInformation.@name.text()
log.info(name)
def phoneNumber =contactInformation.@phoneNumber.text()
log.info(phoneNumber)
assert email == "johndoe@testcompany.com"
assert name == "John Doe"
assert  phoneNumber == "555-555-5555"
}

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="c5e9f234-d6bf-4496-9e27-3cce70ea2a02"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify_Index-Request-DeviceContactInformation-CDS2.0" id="a7b01593-0815-4103-ac9b-fc6179d90bac"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify_Index-Request-DeviceContactInformation-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsDeviceContactInformationStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsDeviceContactInformationStanza/deviceID</xpath>
                  <comparison>equals</comparison>
                  <value>000012311</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsDeviceContactInformationStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsDeviceContactInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def DeviceContactInformationKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("DeviceContactInformationKey")
assert key==DeviceContactInformationKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("indexDeviceContactInformationKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012311"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def contactType = singleRecord.contactType.text()
log.info("contactType = " +contactType)
assert contactType =="DEVICE"


xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsDeviceContactInformationStanza.contactInformation.find{contactInformation->
def email = contactInformation.@email.text()
log.info(email)
def name = contactInformation.@name.text()
log.info(name)
def phoneNumber =contactInformation.@phoneNumber.text()
log.info(phoneNumber)
assert email == "johndoe@testcompany.com"
assert name == "John Doe"
assert  phoneNumber == "555-555-5555"
}

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify-Request-Change-DeviceContactInformation-CDS2.0" id="28ecaf58-7404-48a1-b329-20b3e75aaea3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify-Request-Change-DeviceContactInformation-CDS2.0" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
               <key>${#TestCase#indexDeviceContactInformationKey}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsDeviceContactInformationStanza</name>
            </stanzaId>
<!--            <action>-->
<!--               <change>-->
<!--                  <xpath>/etnmsDeviceContactInformationStanza/deviceID</xpath>-->
<!--                  <value>000012311</value>-->
<!--               </change>-->
<!--            </action>-->
            <action>
               <change>
                  <xpath>/etnmsDeviceContactInformationStanza/deviceType</xpath>
                  <value>16</value>
               </change>
            </action>
<!--            <action>-->
<!--               <change>-->
<!--                  <xpath>/etnmsDeviceContactInformationStanza/contactType</xpath>-->
<!--                  <value>DEVICE</value>-->
<!--               </change>-->
<!--            </action>-->
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsDeviceContactInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def DeviceContactInformationKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("indexDeviceContactInformationKey")
assert key== DeviceContactInformationKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("ModifyDeviceContactInformationKey",key)
}

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012311"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def contactType = singleRecord.contactType.text()
log.info("contactType = " +contactType)
assert contactType =="DEVICE"


xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsDeviceContactInformationStanza.contactInformation.find{contactInformation->
def email = contactInformation.@email.text()
log.info(email)
def name = contactInformation.@name.text()
log.info(name)
def phoneNumber =contactInformation.@phoneNumber.text()
log.info(phoneNumber)
assert email == "johndoe@testcompany.com"
assert name == "John Doe"
assert  phoneNumber == "555-555-5555"
}


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="8b6a5250-7cdb-48df-91e6-10070e48f729"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details -DeviceContactInformation-CDS2.0" id="db65af48-9286-437c-a499-e44fc4ec183a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details -DeviceContactInformation-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsDeviceContactInformationStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsDeviceContactInformationStanza/deviceID</xpath>
                  <comparison>equals</comparison>
                  <value>000012311</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsDeviceContactInformationStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsDeviceContactInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def DeviceContactInformationStanza = messageExchange.modelItem.testStep.testCase.getPropertyValue("ModifyDeviceContactInformationKey")
assert key==DeviceContactInformationStanza
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterModifyDeviceContactInformationKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012311"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def contactType = singleRecord.contactType.text()
log.info("contactType = " +contactType)
assert contactType =="DEVICE"


xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsDeviceContactInformationStanza.contactInformation.find{contactInformation->
def email = contactInformation.@email.text()
log.info(email)
def name = contactInformation.@name.text()
log.info(name)
def phoneNumber =contactInformation.@phoneNumber.text()
log.info(phoneNumber)
assert email == "johndoe@testcompany.com"
assert name == "John Doe"
assert  phoneNumber == "555-555-5555"
}



counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete- Request- DeviceContactInformationStanza- CDS2.0" id="cec8b05a-a6b4-4c07-a279-99569b3c1580"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete- Request- DeviceContactInformationStanza- CDS2.0" id="9f0a80ce-949e-4e5f-b17a-a11c8776cdc7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#AfterModifyDeviceContactInformationKey}</key>
<!--            <key>1640599827820100226</key>-->
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsDeviceContactInformationStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d94c6630-fad5-4e7f-b066-f1ca98b78840"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="79a007a2-c346-4744-8341-87a5315b90cd"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsDeviceContactInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def DeviceContactInformationStanza = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyDeviceContactInformationKey")
assert key==DeviceContactInformationStanza

messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteDeviceContactInformationKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012311"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def contactType = singleRecord.contactType.text()
log.info("contactType = " +contactType)
assert contactType =="DEVICE"

xml.Body.deleteResponse.deleteItem.stanza.etnmsDeviceContactInformationStanza.contactInformation.find{contactInformation->
def email = contactInformation.@email.text()
log.info(email)
def name = contactInformation.@name.text()
log.info(name)
def phoneNumber =contactInformation.@phoneNumber.text()
log.info(phoneNumber)
assert email == "johndoe@testcompany.com"
assert name == "John Doe"
assert  phoneNumber == "555-555-5555"
}


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-AfterDelete-Request-DeviceContactInformationStanza-CDS2.0" id="14e17c59-6ba8-463b-8d52-016ebaf4c84c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-AfterDelete-Request-DeviceContactInformationStanza-CDS2.0" id="2f2669ad-496e-44ba-b77b-8e6734ccf861"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsDeviceContactInformationStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeleteDeviceContactInformationKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsDeviceContactInformationStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9c084cc1-64f3-42e4-8528-fcf9b3915adb"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="2aa3c024-fdc8-4d1a-b40a-59c058629793"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsDeviceContactInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() == 0</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DeviceContactInformationKey</con:name><con:value>1641997523470100225</con:value></con:property><con:property><con:name>KeyDeviceContactInformationKey</con:name><con:value>1641997523470100225</con:value></con:property><con:property><con:name>indexDeviceContactInformationKey</con:name><con:value>1641997523470100225</con:value></con:property><con:property><con:name>ModifyDeviceContactInformationKey</con:name><con:value>1641997523470100225</con:value></con:property><con:property><con:name>AfterModifyDeviceContactInformationKey</con:name><con:value>1641997523470100225</con:value></con:property><con:property><con:name>DeleteDeviceContactInformationKey</con:name><con:value>1641997523470100225</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RequestException" searchProperties="true" id="61732586-5263-488d-806a-7244681e0807" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Verify Insert-Request-RequestException-CDS2.0" id="6f27b4c5-e9f1-49d8-8ba1-c9098ec15e12"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert-Request-RequestException-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2"> 
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header> 
   <soapenv:Body> 
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2"> 
         <insertItem> 
            <etnmsRequestExceptionStanza:etnmsRequestExceptionStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsRequestExceptionStanza="http://xmlns.fedex.com/etnms" xmlns="http://xmlns.fedex.com/etnms"> 
               <exceptionType>Device ID</exceptionType> 
               <deviceID deviceSoftwareVersion="1.0">00001256</deviceID> 
               <deviceType>1</deviceType> 
               <size>10</size> 
               <effectiveDate>2019-03-04T10:08:00.000Z</effectiveDate> 
               <expirationDate>2019-03-26T10:13:00.000Z</expirationDate> 
               <requestDate>2019-03-04T10:16:45.193Z</requestDate> 
               <mfSyncCode>A</mfSyncCode> 
               <user employeeID="5284123"/> 
            </etnmsRequestExceptionStanza:etnmsRequestExceptionStanza> 
         </insertItem> 
      </ns2:insertRequest> 
   </soapenv:Body> 
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="d53ceb8a-2af1-41c2-a9d9-9b1ee4705775"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsRequestExceptionStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("RequestExceptionStanzaKey",key)
}
def exceptionType = singleRecord.exceptionType.text()
log.info("exceptionType = " +exceptionType)
assert exceptionType =="Device ID"

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="00001256"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def size = singleRecord.size.text()
log.info("size = " +size)
assert size =="10"

def effectiveDate = singleRecord.effectiveDate.text()
log.info("effectiveDate = " +effectiveDate)
assert effectiveDate =="2019-03-04T10:08:00.000Z"

def expirationDate = singleRecord.expirationDate.text()
log.info("expirationDate = " +expirationDate)
assert expirationDate =="2019-03-26T10:13:00.000Z"

def requestDate = singleRecord.requestDate.text()
log.info("requestDate = " +requestDate)
assert requestDate =="2019-03-04T10:16:45.193Z"


def mfSyncCode = singleRecord.mfSyncCode.text()
log.info("mfSyncCode = " +mfSyncCode)
assert mfSyncCode =="A"

xml.Body.insertResponse.insertItem.stanza.etnmsRequestExceptionStanza.user.find{user->
def employeeID = user.@employeeID.text()
log.info(employeeID)

assert  employeeID == "5284123"
}




counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Duplicate stanza error for Insert endpoint - RequestExecption - CDS 2.0" id="6d090041-b016-4a44-850e-fcc352ace553" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Duplicate stanza error for Insert endpoint - RequestExecption - CDS 2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2"> 
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header> 
   <soapenv:Body> 
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2"> 
         <insertItem> 
            <etnmsRequestExceptionStanza:etnmsRequestExceptionStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsRequestExceptionStanza="http://xmlns.fedex.com/etnms" xmlns="http://xmlns.fedex.com/etnms"> 
               <exceptionType>Device ID</exceptionType> 
               <deviceID deviceSoftwareVersion="1.0">000012312</deviceID> 
               <deviceType>1</deviceType> 
               <size>10</size> 
               <effectiveDate>2019-03-04T10:08:00.000Z</effectiveDate> 
               <expirationDate>2019-03-26T10:13:00.000Z</expirationDate> 
               <requestDate>2019-03-04T10:16:45.193Z</requestDate> 
               <mfSyncCode>A</mfSyncCode> 
               <user employeeID="5284123"/> 
            </etnmsRequestExceptionStanza:etnmsRequestExceptionStanza> 
         </insertItem> 
      </ns2:insertRequest> 
   </soapenv:Body> 
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="c42ff09c-76ca-4feb-9a75-89c4096eb729"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())

assert allRecords.text()=="DuplicateStanza"


//assert allRecords.text()!="DuplicateStanza"
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-Request-RequestException-CDS2.0" id="4505351d-70a5-48b5-9cc5-9e30f6116a52"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-Request-RequestException-CDS2.0" id="5620a21a-79f0-4d35-a87e-d85a544f3f61"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsRequestExceptionStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#RequestExceptionStanzaKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsRequestExceptionStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d8be03b5-8754-487b-8015-7511fe13a57a"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="164f58f5-02f7-4dd4-954e-c1e8f31af30a"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsRequestExceptionStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def DeviceContactInformationKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("RequestExceptionStanzaKey")
assert key==DeviceContactInformationKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyRequestExceptionStanzaKey",key)
}

def exceptionType = singleRecord.exceptionType.text()
log.info("exceptionType = " +exceptionType)
assert exceptionType =="Device ID"

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="00001256"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def size = singleRecord.size.text()
log.info("size = " +size)
assert size =="10"

def effectiveDate = singleRecord.effectiveDate.text()
log.info("effectiveDate = " +effectiveDate)
assert effectiveDate =="2019-03-04T10:08:00.000Z"

def expirationDate = singleRecord.expirationDate.text()
log.info("expirationDate = " +expirationDate)
assert expirationDate =="2019-03-26T10:13:00.000Z"

def requestDate = singleRecord.requestDate.text()
log.info("requestDate = " +requestDate)
assert requestDate =="2019-03-04T10:16:45.193Z"


def mfSyncCode = singleRecord.mfSyncCode.text()
log.info("mfSyncCode = " +mfSyncCode)
assert mfSyncCode =="A"

xml.Body.insertResponse.insertItem.stanza.etnmsRequestExceptionStanza.user.find{user->
def employeeID = user.@employeeID.text()
log.info(employeeID)

assert  employeeID == "5284123"
}
counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="adc463f4-5971-41fd-96ea-1e9933919075"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index-Request-RequestException-CDS2.0" id="d2c45dd1-c4c6-4d03-8711-5de16a20cc36"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index-Request-RequestException-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsRequestExceptionStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsRequestExceptionStanza/deviceID</xpath>
                  <comparison>equals</comparison>
                  <value>00001256</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsRequestExceptionStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsRequestExceptionStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("RequestExceptionStanzaKey")
assert key==RequestExceptionStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("indexRequestExceptionStanzaKey",key)
}

def exceptionType = singleRecord.exceptionType.text()
log.info("exceptionType = " +exceptionType)
assert exceptionType =="Device ID"

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="00001256"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def size = singleRecord.size.text()
log.info("size = " +size)
assert size =="10"

def effectiveDate = singleRecord.effectiveDate.text()
log.info("effectiveDate = " +effectiveDate)
assert effectiveDate =="2019-03-04T10:08:00.000Z"

def expirationDate = singleRecord.expirationDate.text()
log.info("expirationDate = " +expirationDate)
assert expirationDate =="2019-03-26T10:13:00.000Z"

def requestDate = singleRecord.requestDate.text()
log.info("requestDate = " +requestDate)
assert requestDate =="2019-03-04T10:16:45.193Z"


def mfSyncCode = singleRecord.mfSyncCode.text()
log.info("mfSyncCode = " +mfSyncCode)
assert mfSyncCode =="A"

xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsRequestExceptionStanza.user.find{user->
def employeeID = user.@employeeID.text()
log.info(employeeID)

assert  employeeID == "5284123"
}


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify-AfterIndex-Request-Change-RequestException-CDS2.0" id="c98cc10d-c9e4-4e7e-b938-78dee51e4f37"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify-AfterIndex-Request-Change-RequestException-CDS2.0" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
               <key>${#TestCase#RequestExceptionStanzaKey}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsRequestExceptionStanza</name>
            </stanzaId>
            <action>
               <change>
                  <xpath>/etnmsRequestExceptionStanza/exceptionType</xpath>
                  <value>DeviceID</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsRequestExceptionStanza/deviceID</xpath>
                  <value>00001257</value>
               </change>
            </action>
<!--            <action>-->
<!--               <change>-->
<!--                  <xpath>/etnmsRequestExceptionStanza/deviceType</xpath>-->
<!--                  <value>16</value>-->
<!--               </change>-->
<!--            </action>-->
<!--            <action>-->
<!--               <change>-->
<!--                  <xpath>/etnmsRequestExceptionStanza/size</xpath>-->
<!--                  <value>11</value>-->
<!--               </change>-->
<!--            </action>-->
<!--            <action>-->
<!--               <change>-->
<!--                  <xpath>/etnmsRequestExceptionStanza/effectiveDate</xpath>-->
<!--                  <value>2021-03-04T10:08:00.000Z</value>-->
<!--               </change>-->
<!--            </action>-->
<!--            <action>-->
<!--               <change>-->
<!--                  <xpath>/etnmsRequestExceptionStanza/expirationDate</xpath>-->
<!--                  <value>2021-03-04T10:08:00.000Z</value>-->
<!--               </change>-->
<!--            </action>-->
<!--            <action>-->
<!--               <change>-->
<!--                  <xpath>/etnmsRequestExceptionStanza/requestDate</xpath>-->
<!--                  <value>2021-03-04T10:08:00.000Z</value>-->
<!--               </change>-->
<!--            </action>-->
<!--            <action>-->
<!--               <change>-->
<!--                  <xpath>/etnmsRequestExceptionStanza/mfSyncCode</xpath>-->
<!--                  <value>U</value>-->
<!--               </change>-->
<!--            </action>-->
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsRequestExceptionStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("indexRequestExceptionStanzaKey")
//assert key== RequestExceptionStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("ModidyRequestExceptionStanzaKey",key)
}

def exceptionType = singleRecord.exceptionType.text()
log.info("exceptionType = " +exceptionType)
assert exceptionType =="DeviceID"

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="00001257"

//def deviceType = singleRecord.deviceType.text()
//log.info("deviceType = " +deviceType)
//assert deviceType =="16"
//
//def size = singleRecord.size.text()
//log.info("size = " +size)
//assert size =="11"
//
//def effectiveDate = singleRecord.effectiveDate.text()
//log.info("effectiveDate = " +effectiveDate)
//assert effectiveDate =="2021-03-04T10:08:00.000Z"
//
//def expirationDate = singleRecord.expirationDate.text()
//log.info("expirationDate = " +expirationDate)
//assert expirationDate =="2021-03-04T10:08:00.000Z"
//
//def requestDate = singleRecord.requestDate.text()
//log.info("requestDate = " +requestDate)
//assert requestDate =="2021-03-04T10:08:00.000Z"
//
//
//def mfSyncCode = singleRecord.mfSyncCode.text()
//log.info("mfSyncCode = " +mfSyncCode)
//assert mfSyncCode =="U"

xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsRequestExceptionStanza.user.find{user->
def employeeID = user.@employeeID.text()
log.info(employeeID)

assert  employeeID == "5284123"
}


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="75929dc6-90eb-4ff1-99bf-1a5214136e68"><con:settings/><con:config><delay>50000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details -RequestException-CDS2.0" id="f35295bf-639c-4c87-83a4-7410def4d380"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details -RequestException-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsRequestExceptionStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsRequestExceptionStanza/deviceID</xpath>
                  <comparison>equals</comparison>
                  <value>00001257</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsRequestExceptionStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsRequestExceptionStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ModidyRequestExceptionStanzaKey")
assert key==RequestExceptionStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterModidyRequestExceptionStanzaKey",key)
}
def exceptionType = singleRecord.exceptionType.text()
log.info("exceptionType = " +exceptionType)
assert exceptionType =="DeviceID"

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012310"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def size = singleRecord.size.text()
log.info("size = " +size)
assert size =="11"

def effectiveDate = singleRecord.effectiveDate.text()
log.info("effectiveDate = " +effectiveDate)
assert effectiveDate =="2021-03-04T10:08:00.000Z"

def expirationDate = singleRecord.expirationDate.text()
log.info("expirationDate = " +expirationDate)
assert expirationDate =="2021-03-04T10:08:00.000Z"

def requestDate = singleRecord.requestDate.text()
log.info("requestDate = " +requestDate)
assert requestDate =="2021-03-04T10:08:00.000Z"


def mfSyncCode = singleRecord.mfSyncCode.text()
log.info("mfSyncCode = " +mfSyncCode)
assert mfSyncCode =="U"

xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsRequestExceptionStanza.user.find{user->
def employeeID = user.@employeeID.text()
log.info(employeeID)

assert  employeeID == "5284123"
}




counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete- Request- RequestException- CDS2.0" id="c6136090-44b1-4a72-a7f4-87bc7193141a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete- Request- RequestException- CDS2.0" id="6ffdb5fc-ca1d-464f-935d-453fb2ef3414"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#RequestExceptionStanzaKey}</key>
            <!--1 or more repetitions:-->
<!--            <key>1641997523469100226</key>-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsRequestExceptionStanza</name>
            </stanzaId>
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7c4dfdc2-69f6-4502-bd54-bf74eca385ee"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="581d1fb4-4c77-46b4-aea2-94cf58a413a3"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsRequestExceptionStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModidyRequestExceptionStanzaKey")
//assert key==RequestExceptionStanzaKey

messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteRequestExceptionStanzaKey",key)
}
def exceptionType = singleRecord.exceptionType.text()
log.info("exceptionType = " +exceptionType)
assert exceptionType =="DeviceID"

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="00001257"

//def deviceType = singleRecord.deviceType.text()
//log.info("deviceType = " +deviceType)
//assert deviceType =="16"
//
//def size = singleRecord.size.text()
//log.info("size = " +size)
//assert size =="11"
//
//def effectiveDate = singleRecord.effectiveDate.text()
//log.info("effectiveDate = " +effectiveDate)
//assert effectiveDate =="2021-03-04T10:08:00.000Z"
//
//def expirationDate = singleRecord.expirationDate.text()
//log.info("expirationDate = " +expirationDate)
//assert expirationDate =="2021-03-04T10:08:00.000Z"
//
//def requestDate = singleRecord.requestDate.text()
//log.info("requestDate = " +requestDate)
//assert requestDate =="2021-03-04T10:08:00.000Z"
//
//
//def mfSyncCode = singleRecord.mfSyncCode.text()
//log.info("mfSyncCode = " +mfSyncCode)
//assert mfSyncCode =="U"

xml.Body.deleteResponse.deleteItem.stanza.etnmsRequestExceptionStanza.user.find{user->
def employeeID = user.@employeeID.text()
log.info(employeeID)

assert  employeeID == "5284123"
}




counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-AfterDelete-Request-RequestException-CDS2.0" id="914dd9dd-cfbf-4127-86a6-2d9bf059b764"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-AfterDelete-Request-RequestException-CDS2.0" id="b980fc25-a698-475f-a8a3-6e05dc38d331"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsRequestExceptionStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeleteRequestExceptionStanzaKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsRequestExceptionStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5e8b4eb8-f96b-4d13-90ab-50a07bbbfb15"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="05533527-4c29-47e7-9944-4d383c6cba89"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsDeviceContactInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() == 0</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>RequestExceptionStanzaKey</con:name><con:value>1641997523470100228</con:value></con:property><con:property><con:name>KeyRequestExceptionStanzaKey</con:name><con:value>1641997523470100228</con:value></con:property><con:property><con:name>indexRequestExceptionStanzaKey</con:name><con:value>1641997523470100228</con:value></con:property><con:property><con:name>ModidyRequestExceptionStanzaKey</con:name><con:value>1641997523470100228</con:value></con:property><con:property><con:name>DeleteRequestExceptionStanzaKey</con:name><con:value>1641997523470100228</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AncillaryRequestInformation" searchProperties="true" id="963602e4-51d9-4847-ae70-86e7db5908b2" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Verify Insert-Request-AncillaryRequestInformation-CDS2.0" id="37abfe92-e640-415e-a1fb-df78065f2557"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert-Request-AncillaryRequestInformation-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsAncillaryRequestInformationStanza:etnmsAncillaryRequestInformationStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsAncillaryRequestInformationStanza="http://xmlns.fedex.com/etnms" xmlns:ns6="http://xmlns.fedex.com/etnms">
               <ns6:deviceID xmlns="http://xmlns.fedex.com/etnms">201245121</ns6:deviceID>
               <ns6:deviceType xmlns="http://xmlns.fedex.com/etnms">1</ns6:deviceType>
               <ns6:assignedRangeKey xmlns="http://xmlns.fedex.com/etnms">1331847240867100021</ns6:assignedRangeKey>
               <ns6:type xmlns="http://xmlns.fedex.com/etnms">FORMID</ns6:type>
               <ns6:value xmlns="http://xmlns.fedex.com/etnms">empty</ns6:value>
            </etnmsAncillaryRequestInformationStanza:etnmsAncillaryRequestInformationStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="45d8fe66-2f7d-4460-897f-fa00c348c151"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsAncillaryRequestInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("AncillaryRequestInformationStanza",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="201245121"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1331847240867100021"

def type = singleRecord.type.text()
log.info("type = " +type)
assert type =="FORMID"

def value = singleRecord.value.text()
log.info("value = " +value)
assert value =="empty"





counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verifyduplicate stanza error is not present for - AncillaryRequestInformation-CDS2.0" id="c8359c45-714d-4d68-ae14-3968ee987858"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verifyduplicate stanza error is not present for - AncillaryRequestInformation-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsAncillaryRequestInformationStanza:etnmsAncillaryRequestInformationStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsAncillaryRequestInformationStanza="http://xmlns.fedex.com/etnms" xmlns:ns6="http://xmlns.fedex.com/etnms">
               <ns6:deviceID xmlns="http://xmlns.fedex.com/etnms">201245121</ns6:deviceID>
               <ns6:deviceType xmlns="http://xmlns.fedex.com/etnms">1</ns6:deviceType>
               <ns6:assignedRangeKey xmlns="http://xmlns.fedex.com/etnms">1331847240867100021</ns6:assignedRangeKey>
               <ns6:type xmlns="http://xmlns.fedex.com/etnms">FORMID</ns6:type>
               <ns6:value xmlns="http://xmlns.fedex.com/etnms">empty</ns6:value>
            </etnmsAncillaryRequestInformationStanza:etnmsAncillaryRequestInformationStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f92a8afd-27e7-4ff3-a3a2-69f8d5d0bd48"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())

assert allRecords.text()!="DuplicateStanza"

xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("duplicateKey",key)
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Delete duplicateStanzaTC  key - Request - AncillaryRequestInformation- CDS2.0" id="a3a04828-0cb1-423e-931c-c7130fd42e9b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Delete duplicateStanzaTC  key - Request - AncillaryRequestInformation- CDS2.0" id="7081408e-6a6a-496f-9b4e-88a3705a47c2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#duplicateKey}</key>
            <!--1 or more repetitions:-->
<!--            <key>1640005700719100221</key>-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAncillaryRequestInformationStanza</name>
            </stanzaId>
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a32a17b7-57c6-465c-9021-6c1b70eb4a5d"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ef229030-17a4-4b35-9315-9e8505efeb5b" disabled="true"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsAncillaryRequestInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyAncillaryRequestInformationStanza")
assert key==RequestExceptionStanzaKey

messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteAncillaryRequestInformationStanza",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="201245120"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1331847240867100020"

def type = singleRecord.type.text()
log.info("type = " +type)
assert type =="COUNTRY"

def value = singleRecord.value.text()
log.info("value = " +value)
assert value =="empty1"




counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-Request- AncillaryRequestInformation-CDS2.0" id="3153d931-15b5-456c-89e2-9015e6a925cb"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-Request- AncillaryRequestInformation-CDS2.0" id="f17de6d2-d734-410b-9c7d-7526ea04e567"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsAncillaryRequestInformationStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#AncillaryRequestInformationStanza}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsAncillaryRequestInformationStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9124afb7-8b0b-4319-a25c-dc9d8f385061"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0760f457-277a-4a0d-a5ec-3c59b069e668"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsAncillaryRequestInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AncillaryRequestInformationStanza")
assert key==RequestExceptionStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyAncillaryRequestInformationStanza",key)
}

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="201245121"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1331847240867100021"

def type = singleRecord.type.text()
log.info("type = " +type)
assert type =="FORMID"

def value = singleRecord.value.text()
log.info("value = " +value)
assert value =="empty"




counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="29c9ac76-b1d1-4459-a7db-9ddd72d46859"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index-Request-AncillaryRequestInformation-CDS2.0" id="2c8c3c1a-6e3a-4b0e-8de7-699ac350c57b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index-Request-AncillaryRequestInformation-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsAncillaryRequestInformationStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsAncillaryRequestInformationStanza/deviceID</xpath>
                  <comparison>equals</comparison>
                  <value>201245121</value>
               </indexElement>
               <indexElement>
                  <xpath>/etnmsAncillaryRequestInformationStanza/assignedRangeKey</xpath>
                  <comparison>equals</comparison>
                  <value>1331847240867100021</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAncillaryRequestInformationStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsAncillaryRequestInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AncillaryRequestInformationStanza")
assert key==RequestExceptionStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("indexAncillaryRequestInformationStanza",key)
}

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="201245121"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1331847240867100021"

def type = singleRecord.type.text()
log.info("type = " +type)
assert type =="FORMID"

def value = singleRecord.value.text()
log.info("value = " +value)
assert value =="empty"




counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify-Request-Change-AncillaryRequestInformation-CDS2.0" id="a3c06a24-76f7-409d-8f18-28c0679ff838"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify-Request-Change-AncillaryRequestInformation-CDS2.0" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
               <key>${#TestCase#indexAncillaryRequestInformationStanza}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAncillaryRequestInformationStanza</name>
            </stanzaId>
            <action>
               <change>
                  <xpath>/etnmsAncillaryRequestInformationStanza/deviceID</xpath>
                  <value>201245120</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAncillaryRequestInformationStanza/deviceType</xpath>
                  <value>16</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAncillaryRequestInformationStanza/assignedRangeKey</xpath>
                  <value>1331847240867100020</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAncillaryRequestInformationStanza/type</xpath>
                  <value>COUNTRY</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAncillaryRequestInformationStanza/value</xpath>
                  <value>empty1</value>
               </change>
            </action>
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsAncillaryRequestInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("indexAncillaryRequestInformationStanza")
assert key== RequestExceptionStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("ModifyAncillaryRequestInformationStanza",key)
}

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="201245120"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1331847240867100020"

def type = singleRecord.type.text()
log.info("type = " +type)
assert type =="COUNTRY"

def value = singleRecord.value.text()
log.info("value = " +value)
assert value =="empty1"


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="b0bf581a-e6bb-42c2-aa94-3d6f6400a01c"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details -AncillaryRequestInformation-CDS2.0" id="69761c5f-a5ee-4150-95fd-da69726c77b4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details -AncillaryRequestInformation-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsAncillaryRequestInformationStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsAncillaryRequestInformationStanza/assignedRangeKey</xpath>
                  <comparison>equals</comparison>
                  <value>1331847240867100020</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAncillaryRequestInformationStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsAncillaryRequestInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ModifyAncillaryRequestInformationStanza")
assert key==RequestExceptionStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterModifyAncillaryRequestInformationStanza",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="201245120"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1331847240867100020"

def type = singleRecord.type.text()
log.info("type = " +type)
assert type =="COUNTRY"

def value = singleRecord.value.text()
log.info("value = " +value)
assert value =="empty1"

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete- Request - AncillaryRequestInformation- CDS2.0" id="136dc9a4-8bb8-418b-8b39-f4e8588b0708"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete- Request - AncillaryRequestInformation- CDS2.0" id="7081408e-6a6a-496f-9b4e-88a3705a47c2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#AfterModifyAncillaryRequestInformationStanza}</key>
            <!--1 or more repetitions:-->
<!--            <key>1641997523465100228</key>-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAncillaryRequestInformationStanza</name>
            </stanzaId>
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a32a17b7-57c6-465c-9021-6c1b70eb4a5d"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ef229030-17a4-4b35-9315-9e8505efeb5b"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsAncillaryRequestInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def RequestExceptionStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyAncillaryRequestInformationStanza")
assert key==RequestExceptionStanzaKey

messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteAncillaryRequestInformationStanza",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="201245120"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1331847240867100020"

def type = singleRecord.type.text()
log.info("type = " +type)
assert type =="COUNTRY"

def value = singleRecord.value.text()
log.info("value = " +value)
assert value =="empty1"




counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-AfterDelete-Request- AncillaryRequestInformation-CDS2.0" id="cb65e8ef-0248-472e-b1e3-821ef1758d9f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-AfterDelete-Request- AncillaryRequestInformation-CDS2.0" id="87f25fd8-e286-47fa-b55b-86e1e5778394"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsAncillaryRequestInformationStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeleteAncillaryRequestInformationStanza}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsAncillaryRequestInformationStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="abd95929-6938-477b-97c5-51fa66afb306"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="2c0ecd36-c17c-4c47-b4f0-7e5fd188a53a"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsAncillaryRequestInformationStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() == 0</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>AncillaryRequestInformationStanza</con:name><con:value>1641997523470100223</con:value></con:property><con:property><con:name>KeyAncillaryRequestInformationStanza</con:name><con:value>1641997523470100223</con:value></con:property><con:property><con:name>indexAncillaryRequestInformationStanza</con:name><con:value>1641997523470100223</con:value></con:property><con:property><con:name>ModifyAncillaryRequestInformationStanza</con:name><con:value>1641997523470100223</con:value></con:property><con:property><con:name>AfterModifyAncillaryRequestInformationStanza</con:name><con:value>1641997523470100223</con:value></con:property><con:property><con:name>DeleteAncillaryRequestInformationStanza</con:name><con:value>1641997523470100223</con:value></con:property><con:property><con:name>duplicateKey</con:name><con:value>1641997523471100222</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StatusHistory" searchProperties="true" id="5102fa95-b161-4980-afa9-0c75af7caa60" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Verify Insert- Request- StatusHistory-CDS2.0" id="89513b33-d950-4cd9-863c-706d9fbd8ee4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert- Request- StatusHistory-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsStatusHistoryStanza:etnmsStatusHistoryStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsStatusHistoryStanza="http://xmlns.fedex.com/etnms" xmlns:ns6="http://xmlns.fedex.com/etnms">
               <ns6:assignedRangeKey xmlns="http://xmlns.fedex.com/etnms">1314210269989100022</ns6:assignedRangeKey>
               <ns6:code xmlns="http://xmlns.fedex.com/etnms">STAGED</ns6:code>
               <ns6:changeDate xmlns="http://xmlns.fedex.com/etnms">2011-08-24T14:39:11.426-04:00</ns6:changeDate>
               <ns6:user employeeID="391380" xmlns:ns8="http://xmlns.fedex.com/etnms"/>
            </etnmsStatusHistoryStanza:etnmsStatusHistoryStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="9d2800d8-c3dd-4d22-bdb0-b74f44b1f6ab"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsStatusHistoryStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("StatusHistoryStanza",key)
}
def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1314210269989100022"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="STAGED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2011-08-24T14:39:11.426-04:00"



counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify duplicate stanza error is not present for - StatusHistory - CDS 2.0" id="08b47ff6-8290-4653-8140-80f72e5766df"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify duplicate stanza error is not present for - StatusHistory - CDS 2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsStatusHistoryStanza:etnmsStatusHistoryStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsStatusHistoryStanza="http://xmlns.fedex.com/etnms" xmlns:ns6="http://xmlns.fedex.com/etnms">
               <ns6:assignedRangeKey xmlns="http://xmlns.fedex.com/etnms">1314210269989100022</ns6:assignedRangeKey>
               <ns6:code xmlns="http://xmlns.fedex.com/etnms">STAGED</ns6:code>
               <ns6:changeDate xmlns="http://xmlns.fedex.com/etnms">2011-08-24T14:39:11.426-04:00</ns6:changeDate>
               <ns6:user employeeID="391380" xmlns:ns8="http://xmlns.fedex.com/etnms"/>
            </etnmsStatusHistoryStanza:etnmsStatusHistoryStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="99ac1c4e-6f6f-45ae-a215-2b3e7d9ae37d"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())

assert allRecords.text()!="DuplicateStanza"

xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("duplicateKey",key)
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Delete duplicateStanzaTC  key- Request - StatusHistory- CDS2.0" id="5a9b8c1f-227c-43de-bd96-ac2b28e13bad"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Delete duplicateStanzaTC  key- Request - StatusHistory- CDS2.0" id="4c63f408-879e-4a49-af4c-88dbc4525839"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#duplicateKey}</key>
            <!--1 or more repetitions:-->
<!--            <key>1640005700720100221</key>-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsStatusHistoryStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="71dd80a3-0da1-40cc-ba63-bed10dc71c4c"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ba4122f4-87e1-4c76-accb-1fb9619fe83c" disabled="true"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsStatusHistoryStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyStatusHistoryStanza")
assert key==StatusHistoryStanzaKey

messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteStatusHistoryStanza",key)
}
def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1314210269989100021"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="CONFIRMED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2021-08-24T14:39:11.426-04:00"

//xml.Body.deleteResponse.deleteItem.stanza.etnmsStatusHistoryStanza.user.find{user->
//def employeeID = user.@employeeID.text()
//log.info(employeeID)
//def xmlns = user.@xmlns.text()
//log.info(xmlns)
//assert employeeID== "391380"
//assert xmlns == "http://xmlns.fedex.com/etnms"
//
//}





counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-Request- StatusHistory-CDS2.0" id="e9c8acbb-102c-4667-aca4-29b88421b31b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-Request- StatusHistory-CDS2.0" id="a9b6be36-f8d6-4efb-8d35-6c943165351b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsStatusHistoryStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#StatusHistoryStanza}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsStatusHistoryStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="542cebc8-c701-40f8-8714-348e27c88d99"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8802d66c-1f89-4339-80d4-c3ed1c2b4e57"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsStatusHistoryStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("StatusHistoryStanza")
assert key==StatusHistoryStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyStatusHistoryStanza",key)
}
        

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1314210269989100022"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="STAGED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2011-08-24T14:39:11.426-04:00"





counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="6dbde464-eb4a-4160-add4-316ab57c137f"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index-Request-StatusHistory-CDS2.0" id="e0e44ef6-f335-4c44-8afd-76c3a0eb635e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index-Request-StatusHistory-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsStatusHistoryStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsStatusHistoryStanza/assignedRangeKey</xpath>
                  <comparison>equals</comparison>
                  <value>1314210269989100022</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsStatusHistoryStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsStatusHistoryStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("StatusHistoryStanza")
assert key==StatusHistoryStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("indexStatusHistoryStanza",key)
}
        

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1314210269989100022"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="STAGED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2011-08-24T14:39:11.426-04:00"





counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify-Request-Change-StatusHistory-CDS2.0" id="b6de003c-d5c9-4a48-aa16-c5c6f6f6107c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify-Request-Change-StatusHistory-CDS2.0" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
                 <key>${#TestCase#StatusHistoryStanza}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsStatusHistoryStanza</name>
            </stanzaId>
            <action>
               <change>
                  <xpath>/etnmsStatusHistoryStanza/assignedRangeKey</xpath>
                  <value>1314210269989100021</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsStatusHistoryStanza/code</xpath>
                  <value>CONFIRMED</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsStatusHistoryStanza/changeDate</xpath>
                  <value>2021-08-24T14:39:11.426-04:00</value>
               </change>
            </action>
           
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsStatusHistoryStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("indexStatusHistoryStanza")
//assert key== StatusHistoryStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("ModifyStatusHistoryStanza",key)
}
        

def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1314210269989100021"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="CONFIRMED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2021-08-24T14:39:11.426-04:00"

//xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsStatusHistoryStanza.user.find{user->
//def employeeID = user.@employeeID.text()
//log.info(employeeID)
//def xmlns = user.@xmlns.text()
//log.info(xmlns)
//assert employeeID== "391380"
//assert xmlns == "http://xmlns.fedex.com/etnms"
//
//}



counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="8ef6d30d-59d3-48d9-ba0b-ea2bd870a746"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details -Request-StatusHistory-CDS2.0" id="b379c159-2946-4bec-8db7-7539c80838fd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details -Request-StatusHistory-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsStatusHistoryStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsStatusHistoryStanza/assignedRangeKey</xpath>
                  <comparison>equals</comparison>
                  <value>1314210269989100021</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsStatusHistoryStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsStatusHistoryStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ModifyStatusHistoryStanza")
assert key==StatusHistoryStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterModifyStatusHistoryStanza",key)
}
def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1314210269989100021"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="CONFIRMED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2021-08-24T14:39:11.426-04:00"

//xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsStatusHistoryStanza.user.find{user->
//def employeeID = user.@employeeID.text()
//log.info(employeeID)
//def xmlns = user.@xmlns.text()
//log.info(xmlns)
//assert employeeID== "391380"
//assert xmlns == "http://xmlns.fedex.com/etnms"
//
//}

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete- Request - StatusHistory- CDS2.0" id="1c9723ca-6440-4df3-8922-1da82e82434d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete- Request - StatusHistory- CDS2.0" id="4c63f408-879e-4a49-af4c-88dbc4525839"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
               <key>${#TestCase#StatusHistoryStanza}</key>
            <!--1 or more repetitions:-->
<!--            <key>1640599827821100220</key>-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsStatusHistoryStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="71dd80a3-0da1-40cc-ba63-bed10dc71c4c"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ba4122f4-87e1-4c76-accb-1fb9619fe83c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsStatusHistoryStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyStatusHistoryStanza")
//assert key==StatusHistoryStanzaKey

messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteStatusHistoryStanza",key)
}
def assignedRangeKey = singleRecord.assignedRangeKey.text()
log.info("assignedRangeKey = " +assignedRangeKey)
assert assignedRangeKey =="1314210269989100021"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="CONFIRMED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2021-08-24T14:39:11.426-04:00"

//xml.Body.deleteResponse.deleteItem.stanza.etnmsStatusHistoryStanza.user.find{user->
//def employeeID = user.@employeeID.text()
//log.info(employeeID)
//def xmlns = user.@xmlns.text()
//log.info(xmlns)
//assert employeeID== "391380"
//assert xmlns == "http://xmlns.fedex.com/etnms"
//
//}





counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-AfterDelete-Request- StatusHistory-CDS2.0" id="344c9aaa-d524-4f26-92dc-73b757e0d7a1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-AfterDelete-Request- StatusHistory-CDS2.0" id="4e28a580-1091-4b15-8960-e86f32519729"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsStatusHistoryStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeleteStatusHistoryStanza}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsStatusHistoryStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="0f1acf2d-94e8-4e88-8091-f87fd7e1b251"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="9d28ca90-7212-4a53-8cce-ac609a077c9f"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsStatusHistoryStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() == 0</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>StatusHistoryStanza</con:name><con:value>1641997523470100221</con:value></con:property><con:property><con:name>KeyStatusHistoryStanza</con:name><con:value>1641997523470100221</con:value></con:property><con:property><con:name>indexStatusHistoryStanza</con:name><con:value>1641997523470100221</con:value></con:property><con:property><con:name>ModifyStatusHistoryStanza</con:name><con:value>1641997523470100221</con:value></con:property><con:property><con:name>AfterModifyStatusHistoryStanza</con:name><con:value>1641997523470100221</con:value></con:property><con:property><con:name>DeleteStatusHistoryStanza</con:name><con:value>1641997523470100221</con:value></con:property><con:property><con:name>duplicateKey</con:name><con:value>1641997523470100229</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AssignedRange" searchProperties="true" id="cc8f0ec5-72b5-474c-8ff6-1325605d98e9" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Verify Insert-Request-etnmsAssignedRange-CDS2.0" id="73c90b26-48e6-4b16-a088-aafd95565b91"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert-Request-etnmsAssignedRange-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsAssignedRangeStanza:etnmsAssignedRangeStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsAssignedRangeStanza="http://xmlns.fedex.com/etnms" xmlns:ns6="http://xmlns.fedex.com/etnms">
               <ns6:deviceID deviceSoftwareVersion="" xmlns:ns8="http://xmlns.fedex.com/etnms">010012345</ns6:deviceID>
               <ns6:deviceType xmlns="http://xmlns.fedex.com/etnms">1</ns6:deviceType>
               <ns6:lowerTrackingNumber xmlns="http://xmlns.fedex.com/etnms">02371724380</ns6:lowerTrackingNumber>
               <ns6:upperTrackingNumber xmlns="http://xmlns.fedex.com/etnms">02371725371</ns6:upperTrackingNumber>
               <ns6:lastConsumedTrackingNumber xmlns="http://xmlns.fedex.com/etnms">02371724380</ns6:lastConsumedTrackingNumber>
               <ns6:assignedDate xmlns="http://xmlns.fedex.com/etnms">2012-04-04T18:59:00.494Z</ns6:assignedDate>
               <ns6:currentStatusCode xmlns="http://xmlns.fedex.com/etnms">ARCHIVED</ns6:currentStatusCode>
               <ns6:currentStatusChangeDate xmlns="http://xmlns.fedex.com/etnms">2014-07-24T19:27:45.448Z</ns6:currentStatusChangeDate>
               <ns6:reissueTrackingNumber xmlns="http://xmlns.fedex.com/etnms">02371725183</ns6:reissueTrackingNumber>
               <ns6:requestor employeeID="391380" xmlns:ns8="http://xmlns.fedex.com/etnms"/>
               <ns6:confirmedBy xmlns="http://xmlns.fedex.com/etnms"/>
            </etnmsAssignedRangeStanza:etnmsAssignedRangeStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="44ad0457-d7be-4db5-8ce0-2b87e25628c6"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsAssignedRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("AssignedRangeStanzaKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012345"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="02371724380"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="02371725371"


def lastConsumedTrackingNumber = singleRecord.lastConsumedTrackingNumber.text()
log.info("lastConsumedTrackingNumber = " +lastConsumedTrackingNumber)
assert lastConsumedTrackingNumber =="02371724380"

def assignedDate = singleRecord.assignedDate.text()
log.info("assignedDate = " +assignedDate)
assert assignedDate =="2012-04-04T18:59:00.494Z"

def currentStatusCode = singleRecord.currentStatusCode.text()
log.info("currentStatusCode = " +currentStatusCode)
assert currentStatusCode =="ARCHIVED"

def currentStatusChangeDate = singleRecord.currentStatusChangeDate.text()
log.info("currentStatusChangeDate = " +currentStatusChangeDate)
assert currentStatusChangeDate =="2014-07-24T19:27:45.448Z"

def reissueTrackingNumber = singleRecord.reissueTrackingNumber.text()
log.info("reissueTrackingNumber = " +reissueTrackingNumber)
assert reissueTrackingNumber =="02371725183"


counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify duplicate stanza error is not present for- AssignedRange-CDS2.0" id="f16e174e-4449-4073-99e1-d0d360f22d4e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify duplicate stanza error is not present for- AssignedRange-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsAssignedRangeStanza:etnmsAssignedRangeStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsAssignedRangeStanza="http://xmlns.fedex.com/etnms" xmlns:ns6="http://xmlns.fedex.com/etnms">
               <ns6:deviceID deviceSoftwareVersion="" xmlns:ns8="http://xmlns.fedex.com/etnms">010012345</ns6:deviceID>
               <ns6:deviceType xmlns="http://xmlns.fedex.com/etnms">1</ns6:deviceType>
               <ns6:lowerTrackingNumber xmlns="http://xmlns.fedex.com/etnms">02371724380</ns6:lowerTrackingNumber>
               <ns6:upperTrackingNumber xmlns="http://xmlns.fedex.com/etnms">02371725371</ns6:upperTrackingNumber>
               <ns6:lastConsumedTrackingNumber xmlns="http://xmlns.fedex.com/etnms">02371724380</ns6:lastConsumedTrackingNumber>
               <ns6:assignedDate xmlns="http://xmlns.fedex.com/etnms">2012-04-04T18:59:00.494Z</ns6:assignedDate>
               <ns6:currentStatusCode xmlns="http://xmlns.fedex.com/etnms">ARCHIVED</ns6:currentStatusCode>
               <ns6:currentStatusChangeDate xmlns="http://xmlns.fedex.com/etnms">2014-07-24T19:27:45.448Z</ns6:currentStatusChangeDate>
               <ns6:reissueTrackingNumber xmlns="http://xmlns.fedex.com/etnms">02371725183</ns6:reissueTrackingNumber>
               <ns6:requestor employeeID="391380" xmlns:ns8="http://xmlns.fedex.com/etnms"/>
               <ns6:confirmedBy xmlns="http://xmlns.fedex.com/etnms"/>
            </etnmsAssignedRangeStanza:etnmsAssignedRangeStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="399bafdb-33d1-4de6-95f0-0f890e7f3ab1"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())

assert allRecords.text()!="DuplicateStanza"

           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("duplicateKey",key)
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Delete duplicateStanzaTC key- Request - etnmsAssignedRange- CDS2.0" id="d480161b-5068-4364-b73b-acbbf4152552"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Delete duplicateStanzaTC key- Request - etnmsAssignedRange- CDS2.0" id="051f4386-7739-4cfb-a66d-088d81f069cb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#duplicateKey}</key>
            <!--1 or more repetitions:-->
<!--            <key>1640005700720100222</key>-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAssignedRangeStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f8e7a79b-542c-431b-a5b2-683066ed3102"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b063c56e-c800-40c0-8b9f-27048b7a34d1" disabled="true"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsAssignedRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def AssignedRangeStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyAssignedRangeStanzaKey")
assert key==AssignedRangeStanzaKey

messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteAssignedRangeStanzaKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012321"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="02371724381"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="02371725372"


def lastConsumedTrackingNumber = singleRecord.lastConsumedTrackingNumber.text()
log.info("lastConsumedTrackingNumber = " +lastConsumedTrackingNumber)
assert lastConsumedTrackingNumber =="02371724380"

def assignedDate = singleRecord.assignedDate.text()
log.info("assignedDate = " +assignedDate)
assert assignedDate =="2021-03-04T10:08:00.000Z"

def currentStatusCode = singleRecord.currentStatusCode.text()
log.info("currentStatusCode = " +currentStatusCode)
assert currentStatusCode =="ARCHIVED"

def currentStatusChangeDate = singleRecord.currentStatusChangeDate.text()
log.info("currentStatusChangeDate = " +currentStatusChangeDate)
assert currentStatusChangeDate =="2021-07-24T19:27:45.448Z"

def reissueTrackingNumber = singleRecord.reissueTrackingNumber.text()
log.info("reissueTrackingNumber = " +reissueTrackingNumber)
assert reissueTrackingNumber =="02371725371"





counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-Request- etnmsAssignedRange-CDS2.0" id="791ec222-9fcc-428e-a31e-a51745af5971"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-Request- etnmsAssignedRange-CDS2.0" id="11f7e2f4-5a97-4044-ac01-31f0c0c7a98b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsAssignedRangeStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#AssignedRangeStanzaKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsAssignedRangeStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="bb54e9dc-eb37-4450-a940-262dedff34dc"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="aeab8559-d18d-403c-88e8-890fb87f0ba0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsAssignedRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AssignedRangeStanzaKey")
assert key==StatusHistoryStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyAssignedRangeStanzaKey",key)
}
        

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012345"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="02371724380"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="02371725371"


def lastConsumedTrackingNumber = singleRecord.lastConsumedTrackingNumber.text()
log.info("lastConsumedTrackingNumber = " +lastConsumedTrackingNumber)
assert lastConsumedTrackingNumber =="02371724380"

def assignedDate = singleRecord.assignedDate.text()
log.info("assignedDate = " +assignedDate)
assert assignedDate =="2012-04-04T18:59:00.494Z"

def currentStatusCode = singleRecord.currentStatusCode.text()
log.info("currentStatusCode = " +currentStatusCode)
assert currentStatusCode =="ARCHIVED"

def currentStatusChangeDate = singleRecord.currentStatusChangeDate.text()
log.info("currentStatusChangeDate = " +currentStatusChangeDate)
assert currentStatusChangeDate =="2014-07-24T19:27:45.448Z"

def reissueTrackingNumber = singleRecord.reissueTrackingNumber.text()
log.info("reissueTrackingNumber = " +reissueTrackingNumber)
assert reissueTrackingNumber =="02371725183"





counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="ce33f207-8c8d-4382-85c6-4cc1c9800b72"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index-Request-etnmsAssignedRange-CDS2.0" id="bf2f4b81-74dc-4234-acbc-5bf7f940e214"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index-Request-etnmsAssignedRange-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsAssignedRangeStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsAssignedRangeStanza/deviceID</xpath>
                  <comparison>equals</comparison>
                  <value>010012345</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAssignedRangeStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsAssignedRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def AssignedRangeStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AssignedRangeStanzaKey")
assert key==AssignedRangeStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("indexAssignedRangeStanzaKey",key)
}
        

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012345"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="02371724380"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="02371725371"


def lastConsumedTrackingNumber = singleRecord.lastConsumedTrackingNumber.text()
log.info("lastConsumedTrackingNumber = " +lastConsumedTrackingNumber)
assert lastConsumedTrackingNumber =="02371724380"

def assignedDate = singleRecord.assignedDate.text()
log.info("assignedDate = " +assignedDate)
assert assignedDate =="2012-04-04T18:59:00.494Z"

def currentStatusCode = singleRecord.currentStatusCode.text()
log.info("currentStatusCode = " +currentStatusCode)
assert currentStatusCode =="ARCHIVED"

def currentStatusChangeDate = singleRecord.currentStatusChangeDate.text()
log.info("currentStatusChangeDate = " +currentStatusChangeDate)
assert currentStatusChangeDate =="2014-07-24T19:27:45.448Z"

def reissueTrackingNumber = singleRecord.reissueTrackingNumber.text()
log.info("reissueTrackingNumber = " +reissueTrackingNumber)
assert reissueTrackingNumber =="02371725183"





counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify-Request-Change-etnmsAssignedRange" id="8ab540eb-e4e4-4f01-96e7-6fe1ddf34773"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify-Request-Change-etnmsAssignedRange" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
               <key>${#TestCase#indexAssignedRangeStanzaKey}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAssignedRangeStanza</name>
            </stanzaId>
            <action>
               <change>
                  <xpath>/etnmsAssignedRangeStanza/deviceID</xpath>
                  <value>010012321</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAssignedRangeStanza/deviceType</xpath>
                  <value>16</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAssignedRangeStanza/lowerTrackingNumber</xpath>
                  <value>02371724381</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAssignedRangeStanza/upperTrackingNumber</xpath>
                  <value>02371725372</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAssignedRangeStanza/lastConsumedTrackingNumber</xpath>
                  <value>02371724380</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAssignedRangeStanza/assignedDate</xpath>
                  <value>2021-03-04T10:08:00.000Z</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAssignedRangeStanza/currentStatusCode</xpath>
                  <value>ARCHIVED</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAssignedRangeStanza/currentStatusChangeDate</xpath>
                  <value>2021-07-24T19:27:45.448Z</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsAssignedRangeStanza/reissueTrackingNumber</xpath>
                  <value>02371725371</value>
               </change>
            </action>
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsAssignedRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("indexAssignedRangeStanzaKey")
assert key== StatusHistoryStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("ModifyAssignedRangeStanzaKey",key)
}
        
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("etnmsStatusHistoryStanza",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012321"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="02371724381"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="02371725372"


def lastConsumedTrackingNumber = singleRecord.lastConsumedTrackingNumber.text()
log.info("lastConsumedTrackingNumber = " +lastConsumedTrackingNumber)
assert lastConsumedTrackingNumber =="02371724380"

def assignedDate = singleRecord.assignedDate.text()
log.info("assignedDate = " +assignedDate)
assert assignedDate =="2021-03-04T10:08:00.000Z"

def currentStatusCode = singleRecord.currentStatusCode.text()
log.info("currentStatusCode = " +currentStatusCode)
assert currentStatusCode =="ARCHIVED"

def currentStatusChangeDate = singleRecord.currentStatusChangeDate.text()
log.info("currentStatusChangeDate = " +currentStatusChangeDate)
assert currentStatusChangeDate =="2021-07-24T19:27:45.448Z"

def reissueTrackingNumber = singleRecord.reissueTrackingNumber.text()
log.info("reissueTrackingNumber = " +reissueTrackingNumber)
assert reissueTrackingNumber =="02371725371"




counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="8e143f03-6034-4a4f-a305-0aa91e87e51e"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details -etnmsAssignedRange-CDS2.0" id="dbf5c295-5e6d-4d69-be3a-0351204e65a3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details -etnmsAssignedRange-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsAssignedRangeStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsAssignedRangeStanza/deviceID</xpath>
                  <comparison>equals</comparison>
                  <value>010012321</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAssignedRangeStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsAssignedRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ModifyAssignedRangeStanzaKey")
assert key==StatusHistoryStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterModifyAssignedRangeStanzaKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012321"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="02371724381"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="02371725372"


def lastConsumedTrackingNumber = singleRecord.lastConsumedTrackingNumber.text()
log.info("lastConsumedTrackingNumber = " +lastConsumedTrackingNumber)
assert lastConsumedTrackingNumber =="02371724380"

def assignedDate = singleRecord.assignedDate.text()
log.info("assignedDate = " +assignedDate)
assert assignedDate =="2021-03-04T10:08:00.000Z"

def currentStatusCode = singleRecord.currentStatusCode.text()
log.info("currentStatusCode = " +currentStatusCode)
assert currentStatusCode =="ARCHIVED"

def currentStatusChangeDate = singleRecord.currentStatusChangeDate.text()
log.info("currentStatusChangeDate = " +currentStatusChangeDate)
assert currentStatusChangeDate =="2021-07-24T19:27:45.448Z"

def reissueTrackingNumber = singleRecord.reissueTrackingNumber.text()
log.info("reissueTrackingNumber = " +reissueTrackingNumber)
assert reissueTrackingNumber =="02371725371"



counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete- Request - etnmsAssignedRange- CDS2.0" id="58921099-6c51-46b3-8b00-af1919d799aa"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete- Request - etnmsAssignedRange- CDS2.0" id="051f4386-7739-4cfb-a66d-088d81f069cb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#AssignedRangeStanzaKey}</key>
            <!--1 or more repetitions:-->
<!--            <key>1614874165466200508</key>-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsAssignedRangeStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f8e7a79b-542c-431b-a5b2-683066ed3102"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b063c56e-c800-40c0-8b9f-27048b7a34d1"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsAssignedRangeStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def AssignedRangeStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyAssignedRangeStanzaKey")
//assert key==AssignedRangeStanzaKey

messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteAssignedRangeStanzaKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012321"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="16"

def lowerTrackingNumber = singleRecord.lowerTrackingNumber.text()
log.info("lowerTrackingNumber = " +lowerTrackingNumber)
assert lowerTrackingNumber =="02371724381"

def upperTrackingNumber = singleRecord.upperTrackingNumber.text()
log.info("upperTrackingNumber = " +upperTrackingNumber)
assert upperTrackingNumber =="02371725372"


def lastConsumedTrackingNumber = singleRecord.lastConsumedTrackingNumber.text()
log.info("lastConsumedTrackingNumber = " +lastConsumedTrackingNumber)
assert lastConsumedTrackingNumber =="02371724380"

def assignedDate = singleRecord.assignedDate.text()
log.info("assignedDate = " +assignedDate)
assert assignedDate =="2021-03-04T10:08:00.000Z"

def currentStatusCode = singleRecord.currentStatusCode.text()
log.info("currentStatusCode = " +currentStatusCode)
assert currentStatusCode =="ARCHIVED"

def currentStatusChangeDate = singleRecord.currentStatusChangeDate.text()
log.info("currentStatusChangeDate = " +currentStatusChangeDate)
assert currentStatusChangeDate =="2021-07-24T19:27:45.448Z"

def reissueTrackingNumber = singleRecord.reissueTrackingNumber.text()
log.info("reissueTrackingNumber = " +reissueTrackingNumber)
assert reissueTrackingNumber =="02371725371"





counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-AfterDelete-Request- etnmsAssignedRange-CDS2.0" id="9db94c40-48c7-4c46-9a0b-56a708aee8df"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-AfterDelete-Request- etnmsAssignedRange-CDS2.0" id="617f9444-d64c-4ce4-be11-f11f7fa25230"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsAssignedRangeStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeleteAssignedRangeStanzaKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsAssignedRangeStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2ef90c1-1220-4e3c-bfec-c0ad0d70fea3"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="c324248f-2143-437e-8975-6bf94d4573a4"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsStatusHistoryStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() == 0</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>AssignedRangeStanzaKey</con:name><con:value>1641997523470100222</con:value></con:property><con:property><con:name>KeyAssignedRangeStanzaKey</con:name><con:value>1641997523470100222</con:value></con:property><con:property><con:name>indexAssignedRangeStanzaKey</con:name><con:value>1641997523470100222</con:value></con:property><con:property><con:name>ModifyAssignedRangeStanzaKey</con:name><con:value>1641997523470100222</con:value></con:property><con:property><con:name>duplicateKey</con:name><con:value>1641997523471100220</con:value></con:property><con:property><con:name>DeleteAssignedRangeStanzaKey</con:name><con:value>1641997523470100222</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientStanza" searchProperties="true" id="5d5ef69d-b6fe-4e67-bd1b-75136b9bae74" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Verify Insert-Request-ClientStanza-CDS2.0" id="de9bb387-d578-48ef-91c0-81143e34207f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert-Request-ClientStanza-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsClientStanza:etnmsClientStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsClientStanza="http://xmlns.fedex.com/etnms" xmlns:ns6="http://xmlns.fedex.com/etnms">
               <ns6:deviceID deviceSoftwareVersion="2.0" xmlns:ns8="http://xmlns.fedex.com/etnms">000012341</ns6:deviceID>
               <ns6:deviceType xmlns="http://xmlns.fedex.com/etnms">1</ns6:deviceType>
               <ns6:customerAccountNumber xmlns="http://xmlns.fedex.com/etnms">985632178</ns6:customerAccountNumber>
               <ns6:customerName xmlns="http://xmlns.fedex.com/etnms">Test Company</ns6:customerName>
               <ns6:isActiveFlag xmlns="http://xmlns.fedex.com/etnms">true</ns6:isActiveFlag>
               <ns6:rangeRequest xmlns="http://xmlns.fedex.com/etnms">
                  <rangeMinSize>1000</rangeMinSize>
                  <rangeMaxSize>1500</rangeMaxSize>
                  <rangeReissuePercent>80</rangeReissuePercent>
               </ns6:rangeRequest>
               <ns6:fedexNetDirectory>FUSE</ns6:fedexNetDirectory>
            </etnmsClientStanza:etnmsClientStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="e9a35a5b-6959-4c06-97fd-92186b5c61a8"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsClientStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("ClientStanzaKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012341"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def customerAccountNumber = singleRecord.customerAccountNumber.text()
log.info("customerAccountNumber = " +customerAccountNumber)
assert customerAccountNumber =="985632178"

def customerName = singleRecord.customerName.text()
log.info("customerName = " +customerName)
assert customerName =="Test Company"


def isActiveFlag = singleRecord.isActiveFlag.text()
log.info("isActiveFlag = " +isActiveFlag)
assert isActiveFlag =="true"

def fedexNetDirectory = singleRecord.fedexNetDirectory.text()
log.info("fedexNetDirectory = " +fedexNetDirectory)
assert fedexNetDirectory =="FUSE"

xml.Body.insertResponse.insertItem.stanza.etnmsClientStanza.rangeRequest.find{rangeRequest->
def rangeMinSize = rangeRequest.rangeMinSize.text()
log.info("rangeMinSize = " +rangeMinSize)
def rangeMaxSize = rangeRequest.rangeMaxSize.text()
log.info("rangeMaxSize = " +rangeMaxSize)
def rangeReissuePercent = rangeRequest.rangeReissuePercent.text()
log.info("rangeReissuePercent = " +rangeReissuePercent)
assert rangeMinSize == "1000"
assert rangeMaxSize == "1500"
assert rangeReissuePercent == "80"

}

counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify duplicate stanza error is not present for - ClientStanza - CDS 2.0" id="742b6b55-9f93-4445-96df-f2c4c00bdad6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify duplicate stanza error is not present for - ClientStanza - CDS 2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <etnmsClientStanza:etnmsClientStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:etnmsClientStanza="http://xmlns.fedex.com/etnms" xmlns:ns6="http://xmlns.fedex.com/etnms">
               <ns6:deviceID deviceSoftwareVersion="2.0" xmlns:ns8="http://xmlns.fedex.com/etnms">000012341</ns6:deviceID>
               <ns6:deviceType xmlns="http://xmlns.fedex.com/etnms">1</ns6:deviceType>
               <ns6:customerAccountNumber xmlns="http://xmlns.fedex.com/etnms">985632178</ns6:customerAccountNumber>
               <ns6:customerName xmlns="http://xmlns.fedex.com/etnms">Test Company</ns6:customerName>
               <ns6:isActiveFlag xmlns="http://xmlns.fedex.com/etnms">true</ns6:isActiveFlag>
               <ns6:rangeRequest xmlns="http://xmlns.fedex.com/etnms">
                  <rangeMinSize>1000</rangeMinSize>
                  <rangeMaxSize>1500</rangeMaxSize>
                  <rangeReissuePercent>80</rangeReissuePercent>
               </ns6:rangeRequest>
               <ns6:fedexNetDirectory>FUSE</ns6:fedexNetDirectory>
            </etnmsClientStanza:etnmsClientStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="d5ee1bd7-2131-471d-8031-0d7822395a6d"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())

assert allRecords.text()!="DuplicateStanza"

xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("duplicateKey",key)
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Delete duplicateStanzaTC key - Request - ClentStanza- CDS2.0" id="c86bee70-412f-48ef-83e6-a6bbe69efd4d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Delete duplicateStanzaTC key - Request - ClentStanza- CDS2.0" id="3230d4ad-a815-4486-b3cb-59ec66579fe9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#duplicateKey}</key>
<!--            <key>1640005700720100223</key>-->
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsClientStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dfa07987-09ea-4e14-9464-874ba03d6fab"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="99ff8b87-25d5-492a-9119-9febfb1c9be9" disabled="true"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsClientStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def ClientStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterIndexClientStanzaKey")
assert key==ClientStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteClientStanzaKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012347"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="18"

def customerAccountNumber = singleRecord.customerAccountNumber.text()
log.info("customerAccountNumber = " +customerAccountNumber)
assert customerAccountNumber =="985632178"

def customerName = singleRecord.customerName.text()
log.info("customerName = " +customerName)
assert customerName =="Test"


def isActiveFlag = singleRecord.isActiveFlag.text()
log.info("isActiveFlag = " +isActiveFlag)
assert isActiveFlag =="false"

def fedexNetDirectory = singleRecord.fedexNetDirectory.text()
log.info("fedexNetDirectory = " +fedexNetDirectory)
assert fedexNetDirectory =="FUSS"

xml.Body.deleteResponse.deleteItem.stanza.etnmsClientStanza.rangeRequest.find{rangeRequest->
def rangeMinSize = rangeRequest.rangeMinSize.text()
log.info("rangeMinSize = " +rangeMinSize)
def rangeMaxSize = rangeRequest.rangeMaxSize.text()
log.info("rangeMaxSize = " +rangeMaxSize)
def rangeReissuePercent = rangeRequest.rangeReissuePercent.text()
log.info("rangeReissuePercent = " +rangeReissuePercent)
assert rangeMinSize == "1000"
assert rangeMaxSize == "1500"
assert rangeReissuePercent == "80"

}


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-Request- ClientStanza-CDS2.0" id="d5c69139-b2f1-4dd3-9408-1087971ebb07"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-Request- ClientStanza-CDS2.0" id="50077a26-f28d-4717-b80f-94405a1924e2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsClientStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#ClientStanzaKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsClientStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e2ebbf5f-cc74-4837-9de9-b28d4c9d613b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="abc442fb-602e-4ee7-b79f-ecb4c72680a4"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsClientStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def AssignedRangeStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ClientStanzaKey")
assert key==AssignedRangeStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyClientStanzaKey",key)
}
        
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("etnmsStatusHistoryStanza",key)
}

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012341"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def customerAccountNumber = singleRecord.customerAccountNumber.text()
log.info("customerAccountNumber = " +customerAccountNumber)
assert customerAccountNumber =="985632178"

def customerName = singleRecord.customerName.text()
log.info("customerName = " +customerName)
assert customerName =="Test Company"


def isActiveFlag = singleRecord.isActiveFlag.text()
log.info("isActiveFlag = " +isActiveFlag)
assert isActiveFlag =="true"

def fedexNetDirectory = singleRecord.fedexNetDirectory.text()
log.info("fedexNetDirectory = " +fedexNetDirectory)
assert fedexNetDirectory =="FUSE"

xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsClientStanza.rangeRequest.find{rangeRequest->
def rangeMinSize = rangeRequest.rangeMinSize.text()
log.info("rangeMinSize = " +rangeMinSize)
def rangeMaxSize = rangeRequest.rangeMaxSize.text()
log.info("rangeMaxSize = " +rangeMaxSize)
def rangeReissuePercent = rangeRequest.rangeReissuePercent.text()
log.info("rangeReissuePercent = " +rangeReissuePercent)
assert rangeMinSize == "1000"
assert rangeMaxSize == "1500"
assert rangeReissuePercent == "80"

}

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="06d059b8-d9e5-4cdf-bb38-73baebe9b465"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index-Request-ClientStanza-CDS2.0" id="ab90e1c1-fff7-4297-ae21-0121dd4ef542"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index-Request-ClientStanza-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsClientStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsClientStanza/deviceID</xpath>
                  <comparison>equals</comparison>
                  <value>000012341</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsClientStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsClientStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def AssignedRangeStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ClientStanzaKey")
assert key==AssignedRangeStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("indexClientStanzaKey",key)
}
        
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("etnmsStatusHistoryStanza",key)
}

def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="000012341"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="1"

def customerAccountNumber = singleRecord.customerAccountNumber.text()
log.info("customerAccountNumber = " +customerAccountNumber)
assert customerAccountNumber =="985632178"

def customerName = singleRecord.customerName.text()
log.info("customerName = " +customerName)
assert customerName =="Test Company"


def isActiveFlag = singleRecord.isActiveFlag.text()
log.info("isActiveFlag = " +isActiveFlag)
assert isActiveFlag =="true"

def fedexNetDirectory = singleRecord.fedexNetDirectory.text()
log.info("fedexNetDirectory = " +fedexNetDirectory)
assert fedexNetDirectory =="FUSE"

xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsClientStanza.rangeRequest.find{rangeRequest->
def rangeMinSize = rangeRequest.rangeMinSize.text()
log.info("rangeMinSize = " +rangeMinSize)
def rangeMaxSize = rangeRequest.rangeMaxSize.text()
log.info("rangeMaxSize = " +rangeMaxSize)
def rangeReissuePercent = rangeRequest.rangeReissuePercent.text()
log.info("rangeReissuePercent = " +rangeReissuePercent)
assert rangeMinSize == "1000"
assert rangeMaxSize == "1500"
assert rangeReissuePercent == "80"

}

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify-Request-Change-ClientStanza-CDS2.0" id="9a210974-37fc-4e4a-87a5-780bc970b04a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify-Request-Change-ClientStanza-CDS2.0" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
               <key>${#TestCase#ClientStanzaKey}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsClientStanza</name>
            </stanzaId>
            <action>
               <change>
                  <xpath>/etnmsClientStanza/deviceID</xpath>
                  <value>010012347</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsClientStanza/deviceType</xpath>
                  <value>18</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsClientStanza/customerAccountNumber</xpath>
                  <value>985632178</value>
               </change>
            </action>
             <action>
               <change>
                  <xpath>/etnmsClientStanza/customerName</xpath>
                  <value>Test</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsClientStanza/isActiveFlag</xpath>
                  <value>false</value>
               </change>
            </action>
             <action>
               <change>
                  <xpath>/etnmsClientStanza/fedexNetDirectory</xpath>
                  <value>FUSS</value>
               </change>
            </action>
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsClientStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def StatusHistoryStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("indexClientStanzaKey")
//assert key== StatusHistoryStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("ModifyClientStanzaKey",key)
}
        
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("etnmsStatusHistoryStanza",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012347"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="18"

def customerAccountNumber = singleRecord.customerAccountNumber.text()
log.info("customerAccountNumber = " +customerAccountNumber)
assert customerAccountNumber =="985632178"

def customerName = singleRecord.customerName.text()
log.info("customerName = " +customerName)
assert customerName =="Test"


def isActiveFlag = singleRecord.isActiveFlag.text()
log.info("isActiveFlag = " +isActiveFlag)
assert isActiveFlag =="false"

def fedexNetDirectory = singleRecord.fedexNetDirectory.text()
log.info("fedexNetDirectory = " +fedexNetDirectory)
assert fedexNetDirectory =="FUSS"

xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsClientStanza.rangeRequest.find{rangeRequest->
def rangeMinSize = rangeRequest.rangeMinSize.text()
log.info("rangeMinSize = " +rangeMinSize)
def rangeMaxSize = rangeRequest.rangeMaxSize.text()
log.info("rangeMaxSize = " +rangeMaxSize)
def rangeReissuePercent = rangeRequest.rangeReissuePercent.text()
log.info("rangeReissuePercent = " +rangeReissuePercent)
assert rangeMinSize == "1000"
assert rangeMaxSize == "1500"
assert rangeReissuePercent == "80"

}



counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="2e849aac-426f-4651-bec6-55cdfaa11704"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details -ClientStanza-CDS2.0" id="8f76ec1c-78cd-4d50-a5a3-aa3fa5da1a0d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details -ClientStanza-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsClientStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsClientStanza/deviceID</xpath>
                  <comparison>equals</comparison>
                  <value>010012347</value>
               </indexElement>
               <!--<indexElement>-->
               <!--<xpath>/etnmsClientStanza/customerAccountNumber</xpath>-->
               <!--<comparison>equals</comparison>-->
               <!--<value>985632178</value>-->
               <!--</indexElement>-->
               <!--<indexElement>-->
               <!--<xpath>/etnmsClientStanza/deviceType</xpath>-->
               <!--<comparison>equals</comparison>-->
               <!--<value>1</value>-->
               <!--</indexElement>-->
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsClientStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsClientStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           

xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def ClientStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ModifyClientStanzaKey")
assert key==ClientStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterIndexClientStanzaKey",key)
}
        


def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012347"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="18"

def customerAccountNumber = singleRecord.customerAccountNumber.text()
log.info("customerAccountNumber = " +customerAccountNumber)
assert customerAccountNumber =="985632178"

def customerName = singleRecord.customerName.text()
log.info("customerName = " +customerName)
assert customerName =="Test"


def isActiveFlag = singleRecord.isActiveFlag.text()
log.info("isActiveFlag = " +isActiveFlag)
assert isActiveFlag =="false"

def fedexNetDirectory = singleRecord.fedexNetDirectory.text()
log.info("fedexNetDirectory = " +fedexNetDirectory)
assert fedexNetDirectory =="FUSS"

xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsClientStanza.rangeRequest.find{rangeRequest->
def rangeMinSize = rangeRequest.rangeMinSize.text()
log.info("rangeMinSize = " +rangeMinSize)
def rangeMaxSize = rangeRequest.rangeMaxSize.text()
log.info("rangeMaxSize = " +rangeMaxSize)
def rangeReissuePercent = rangeRequest.rangeReissuePercent.text()
log.info("rangeReissuePercent = " +rangeReissuePercent)
assert rangeMinSize == "1000"
assert rangeMaxSize == "1500"
assert rangeReissuePercent == "80"

}

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete- Request - ClentStanza- CDS2.0" id="ae12b7cc-0a40-47b2-bc83-475c85dc9bf0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete- Request - ClentStanza- CDS2.0" id="3230d4ad-a815-4486-b3cb-59ec66579fe9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#ClientStanzaKey}</key>
<!--            <key>1641825644175100222</key>-->
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsClientStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dfa07987-09ea-4e14-9464-874ba03d6fab"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="99ff8b87-25d5-492a-9119-9febfb1c9be9"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsClientStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() > 0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - Thi is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def ClientStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterIndexClientStanzaKey")
//assert key==ClientStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteClientStanzaKey",key)
}
def deviceID = singleRecord.deviceID.text()
log.info("deviceID = " +deviceID)
assert deviceID =="010012347"

def deviceType = singleRecord.deviceType.text()
log.info("deviceType = " +deviceType)
assert deviceType =="18"

def customerAccountNumber = singleRecord.customerAccountNumber.text()
log.info("customerAccountNumber = " +customerAccountNumber)
assert customerAccountNumber =="985632178"

def customerName = singleRecord.customerName.text()
log.info("customerName = " +customerName)
assert customerName =="Test"


def isActiveFlag = singleRecord.isActiveFlag.text()
log.info("isActiveFlag = " +isActiveFlag)
assert isActiveFlag =="false"

def fedexNetDirectory = singleRecord.fedexNetDirectory.text()
log.info("fedexNetDirectory = " +fedexNetDirectory)
assert fedexNetDirectory =="FUSS"

xml.Body.deleteResponse.deleteItem.stanza.etnmsClientStanza.rangeRequest.find{rangeRequest->
def rangeMinSize = rangeRequest.rangeMinSize.text()
log.info("rangeMinSize = " +rangeMinSize)
def rangeMaxSize = rangeRequest.rangeMaxSize.text()
log.info("rangeMaxSize = " +rangeMaxSize)
def rangeReissuePercent = rangeRequest.rangeReissuePercent.text()
log.info("rangeReissuePercent = " +rangeReissuePercent)
assert rangeMinSize == "1000"
assert rangeMaxSize == "1500"
assert rangeReissuePercent == "80"

}


counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify KeyQuery-AfterDelete-Request- ClientStanza-CDS2.0" id="2a13f5c8-b08b-41c0-998f-6e165953d26d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify KeyQuery-AfterDelete-Request- ClientStanza-CDS2.0" id="6dd6c5d8-208c-4e75-80f8-f9de716aaea9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <!--Optional:-->
         <name>etnmsClientStanza</name>
         <!--1 or more repetitions:-->
         <key>${#TestCase#DeleteClientStanzaKey}</key>
         <!--1 or more repetitions:-->
         <stanzaId>
            <domain>etnms</domain>
            <!--Optional:-->
            <name>etnmsClientStanza</name>
            <!--Optional:-->
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="bf874f70-8efa-4216-9378-d606ac1f4f53"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="c130de29-9dca-4c2c-8c9b-a7b0c27d1cc5"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsClientStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size() == 0</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>ClientStanzaKey</con:name><con:value>1641997523470100226</con:value></con:property><con:property><con:name>KeyClientStanzaKey</con:name><con:value>1641997523470100226</con:value></con:property><con:property><con:name>indexClientStanzaKey</con:name><con:value>1641997523466100220</con:value></con:property><con:property><con:name>ModifyClientStanzaKey</con:name><con:value>1641997523470100226</con:value></con:property><con:property><con:name>duplicateKey</con:name><con:value>1641997523471100221</con:value></con:property><con:property><con:name>DeleteClientStanzaKey</con:name><con:value>1641997523470100226</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientStatus" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b0b202fa-fdaa-4e38-8cab-ed447af9bbb7"><con:settings/><con:testStep type="request" name="Verify Insert-Request-ClientStatusStanza-CDS2.0" id="ef7e0607-8941-4654-808d-78c4ef72d1da"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Insert-Request-ClientStatusStanza-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <ns6:etnmsClientStatusStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:ns6="http://xmlns.fedex.com/etnms" xmlns:etnmsClientStatusStanza="http://xmlns.fedex.com/etnms">
               <ns6:clientKey>1307794623313300040</ns6:clientKey>
               <ns6:code>DELETE</ns6:code>
               <ns6:changeDate>2011-06-12T23:03:47.557Z</ns6:changeDate>
            </ns6:etnmsClientStatusStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="39bf89ca-a589-4654-806a-06f76f45220a"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.insertResponse.insertItem.stanza.etnmsClientStatusStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size()>0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - This is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.insertResponse.insertItem.find{insertItem->
def key = insertItem.key.text()
log.info("keycyCode = " +key)
 messageExchange.modelItem.testStep.testCase.setPropertyValue("ClientStatusStanzaKey",key)
}
def clientKey = singleRecord.clientKey.text()
log.info("clientKey = " +clientKey)
assert clientKey =="1307794623313300040"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="DELETE"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2011-06-12T23:03:47.557Z"


counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Duplicate stanza error for Insert endpoint -ClientStatusStanza-CDS2.0" id="37e21fc1-bf22-484e-9910-d76dc5dc6aa4" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>insert</con:operation><con:request name="Verify Duplicate stanza error for Insert endpoint -ClientStatusStanza-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:insertRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <insertItem>
            <ns6:etnmsClientStatusStanza domain="etnms" majorVersion="1" minorVersion="0" xmlns:ns6="http://xmlns.fedex.com/etnms" xmlns:etnmsClientStatusStanza="http://xmlns.fedex.com/etnms">
               <ns6:clientKey>1307794623313300040</ns6:clientKey>
               <ns6:code>DELETE</ns6:code>
               <ns6:changeDate>2011-06-12T23:03:47.557Z</ns6:changeDate>
            </ns6:etnmsClientStatusStanza>
         </insertItem>
      </ns2:insertRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="41f6832e-7723-429e-94d5-ea7b7e26b838"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.Fault.detail.code
log.info("all Records size = " + allRecords.text())
assert allRecords.text()=="DuplicateStanza"
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Key-Request-ClientStatusStanza-CDS2.0" id="3a44d93d-3e5f-470a-97e6-dc90113f939a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify Key-Request-ClientStatusStanza-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <key>${#TestCase#ClientStatusStanzaKey}</key>
         <stanzaId>
            <domain>etnms</domain>
            <name>etnmsClientStatusStanza</name>
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="01917427-f317-4a33-9b86-57e3b3b933e7"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsClientStatusStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size()>0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - This is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.keyQueryResponse.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def ClientStatusStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ClientStatusStanzaKey")
assert key==ClientStatusStanzaKey
 messageExchange.modelItem.testStep.testCase.setPropertyValue("KeyQueryClientStatusStanzaKey",key)
}
def clientKey = singleRecord.clientKey.text()
log.info("clientKey = " +clientKey)
assert clientKey =="1307794623313300040"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="DELETE"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2011-06-12T23:03:47.557Z"


counter = counter + 1
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" id="e70692fa-98ad-4401-8cf0-1727babc454f"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index-Request-ClientStatusStanza-CDS2.0" id="f4b0c450-b4cf-4194-886d-bbe114f085d0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index-Request-ClientStatusStanza-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsClientStatusStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsClientStatusStanza/clientKey</xpath>
                  <comparison>equals</comparison>
                  <value>1307794623313300040</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsClientStatusStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsClientStatusStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size()>0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - This is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keycyCode = " +key)
def DetailKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ClientStatusStanzaKey")
assert key==DetailKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("IndexClientStatusStanzaKey",key)
}
def clientKey = singleRecord.clientKey.text()
log.info("clientKey = " +clientKey)
assert clientKey =="1307794623313300040"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="DELETE"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2011-06-12T23:03:47.557Z"
counter = counter + 1
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Modify-Request-ClientStatusStanza-CDS2.0" id="95ada372-3586-4b58-ad58-3e40cd15211b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>modify</con:operation><con:request name="Verify Modify-Request-ClientStatusStanza-CDS2.0" id="8a985439-0617-4324-983c-b8af7cf617c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <ns2:modifyRequest xmlns:ns2="http://www.fedex.com/xmlns/cds2">
         <modifyItem>
            <keyAndLock>
               <key>${#TestCase#IndexClientStatusStanzaKey}</key>
               <optimisticLockToken>1</optimisticLockToken>
            </keyAndLock>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsClientStatusStanza</name>
            </stanzaId>
            <action>
               <change>
                  <xpath>/etnmsClientStatusStanza/code</xpath>
                  <value>DEACTIVATED</value>
               </change>
            </action>
            <action>
               <change>
                  <xpath>/etnmsClientStatusStanza/changeDate</xpath>
                  <value>2011-07-12T23:03:47.557Z</value>
               </change>
            </action>
         </modifyItem>
      </ns2:modifyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d02ad5a3-a870-4a31-a7a1-ca8da3893f0b"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f12bfac0-3169-49f4-8bbb-0af3b856612c"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.modifyResponse.modifyItem.keyedStanzas.stanza.etnmsClientStatusStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size()>0
counter = 1
for (singleRecord  in allRecords)
{
log.info("Counter - This is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.modifyResponse.modifyItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keyCode = " +key)
def ClientStatusStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("IndexClientStatusStanzaKey")
assert key== ClientStatusStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("ModifyClientStatusStanzaKey",key)
}
def clientKey = singleRecord.clientKey.text()
log.info("clientKey = " +clientKey)
assert clientKey =="1307794623313300040"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="DEACTIVATED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2011-07-12T23:03:47.557Z"
counter = counter + 1

}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay2" id="f83cd9e1-d788-4a50-9610-4ff2d03ab2cb"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="request" name="Verify Index query  after modifying details-ClientStatusStanza-CDS2.0" id="3cbd292e-9d42-4794-98a6-6a6ff934e2b9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>indexQuery</con:operation><con:request name="Verify Index query  after modifying details-ClientStatusStanza-CDS2.0" id="982a1fbf-d7c4-4b78-826b-5b81619145b9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:indexQueryRequest>
         <queryItem>
            <index>
               <stanzaId>
                  <domain>etnms</domain>
                  <name>etnmsClientStatusStanza</name>
                  <version>1</version>
               </stanzaId>
               <indexElement>
                  <xpath>/etnmsClientStatusStanza/clientKey</xpath>
                  <comparison>equals</comparison>
                  <value>1307794623313300040</value>
               </indexElement>
            </index>
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsClientStatusStanza</name>
            </stanzaId>
            <paging bookmark="" resultsPerPage="25"/>
         </queryItem>
      </cds2:indexQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="25e05a43-234d-4558-a9bd-6469d4f02404"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebfc7bd9-126f-49fd-a56a-9e7491ae8ef0"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.indexQueryResponse.queryItem.keyedStanzas.stanza.etnmsClientStatusStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size()>0
counter = 1
for (singleRecord in allRecords)
{
log.info("Counter - This is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.indexQueryResponse.queryItem.keyedStanzas.find{keyedStanzas->
def key = keyedStanzas.key.text()
log.info("keycyCode = " +key)
def DetailKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("ModifyClientStatusStanzaKey")
assert key==DetailKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("AfterModifyClientStatusStanzaKey",key)
}
def clientKey = singleRecord.clientKey.text()
log.info("clientKey = " +clientKey)
assert clientKey =="1307794623313300040"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="DEACTIVATED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2011-07-12T23:03:47.557Z"
counter = counter + 1
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Delete- Request - ClientStatusStanza- CDS2.0" id="2cce9ae9-bec3-4909-aff1-aa6feb1cc0da"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>delete</con:operation><con:request name="Verify Delete- Request - ClientStatusStanza- CDS2.0" id="5f66b47d-fbd0-490d-ba5e-5be28439f550"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Write}</soapenv:Header>
   <soapenv:Body>
      <cds2:deleteRequest>
         <!--1 or more repetitions:-->
         <deleteItem>
            <!--1 or more repetitions:-->
            <key>${#TestCase#AfterModifyClientStatusStanzaKey}</key>
<!--          <key>1640599827816100224</key>-->
            <!--1 or more repetitions:-->
            <stanzaId>
               <domain>etnms</domain>
               <name>etnmsClientStatusStanza</name>
            </stanzaId>
            <!--Optional:-->
         </deleteItem>
      </cds2:deleteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="288fa1db-b45e-442d-8148-621326b03bbb"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="7aebbc27-b5d7-4fa6-86ff-917f771d6e54"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.deleteResponse.deleteItem.stanza.etnmsClientStatusStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size()>0
counter = 1
for (singleRecord  in allRecords)
{
log.info("Counter - This is Record No :- " + counter)

if (counter == 3){
	break
}           
xml.Body.deleteResponse.deleteItem.find{deleteItem->
def key = deleteItem.key.text()
log.info("keyCode = " +key)
def ClientStatusStanzaKey = messageExchange.modelItem.testStep.testCase.getPropertyValue("AfterModifyClientStatusStanzaKey")
assert key==ClientStatusStanzaKey
messageExchange.modelItem.testStep.testCase.setPropertyValue("DeleteClientStatusStanzaKey", key)
}
def clientKey = singleRecord.clientKey.text()
log.info("clientKey = " +clientKey)
assert clientKey =="1307794623313300040"

def code = singleRecord.code.text()
log.info("code = " +code)
assert code =="DEACTIVATED"

def changeDate = singleRecord.changeDate.text()
log.info("changeDate = " +changeDate)
assert changeDate =="2011-07-12T23:03:47.557Z"

counter = counter + 1
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Verify Key-AfterDelete-Request-ClientStatusStanza-CDS2.0" id="6799e82a-a664-4d8f-9e2c-09223c737a80"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CDSSoap11</con:interface><con:operation>keyQuery</con:operation><con:request name="Verify Key-AfterDelete-Request-ClientStatusStanza-CDS2.0" id="f531e14c-5d0a-4473-ac9c-ff94d8de5913"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#endpoint.cds2.0}/clear</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cds2="http://www.fedex.com/xmlns/cds2">
   <soapenv:Header>${#Project#SecurityToken_Read}</soapenv:Header>
   <soapenv:Body>
      <cds2:keyQueryRequest>
         <key>${#TestCase#ClientStatusStanzaKey}</key>
         <stanzaId>
            <domain>etnms</domain>
            <name>etnmsClientStatusStanza</name>
         </stanzaId>
      </cds2:keyQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="850f0f80-b48d-4538-ba3f-ba6737fe9623"/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f667f9e0-0a59-45e1-845e-10d5def16255"><con:configuration><scriptText>import groovy.xml.*
import com.eviware.soapui.support.XmlHolder
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

def responseContent = messageExchange.response.responseContent
def xml = new XmlSlurper().parseText(responseContent)
def allRecords = xml.Body.keyQueryResponse.keyedStanzas.stanza.etnmsClientStatusStanza
log.info("all Records size = " + allRecords.size())
assert allRecords.size()== 0
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>ClientStatusStanzaKey</con:name><con:value>1641997523470100224</con:value></con:property><con:property><con:name>KeyQueryClientStatusStanzaKey</con:name><con:value>1641997523470100224</con:value></con:property><con:property><con:name>IndexClientStatusStanzaKey</con:name><con:value>1641997523470100224</con:value></con:property><con:property><con:name>ModifyClientStatusStanzaKey</con:name><con:value>1641997523470100224</con:value></con:property><con:property><con:name>AfterModifyClientStatusStanzaKey</con:name><con:value>1641997523470100224</con:value></con:property><con:property><con:name>DeleteClientStatusStanzaKey</con:name><con:value>1641997523470100224</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>endpoint.cds1.0</con:name><con:value>cds-level2.ute.fedex.com:80</con:value></con:property><con:property><con:name>endpoint.cds2.0</con:name><con:value>u0007101.test.cloud.fedex.com:8080/CommonDataService</con:value></con:property><con:property><con:name>security.cds1.0</con:name><con:value><![CDATA[<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">          <wsse:UsernameToken xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">             <wsse:Username>${=(com.fedex.security.util.TokenGenerator.getToken("943415_cds", ""))}</wsse:Username>          </wsse:UsernameToken>       </wsse:Security>]]></con:value></con:property><con:property><con:name>SecurityToken_Read</con:name><con:value><![CDATA[<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">           <wsse:UsernameToken xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">             <wsse:Username>${=(com.fedex.security.client.oktaauth.OktaTokenGenerator.getToken("APP4291"))}</wsse:Username>          </wsse:UsernameToken>       </wsse:Security>]]></con:value></con:property><con:property><con:name>SecurityToken_Write</con:name><con:value><![CDATA[<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">           <wsse:UsernameToken xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">             <wsse:Username>${=(com.fedex.security.client.oktaauth.OktaTokenGenerator.getToken("APP4291"))}</wsse:Username>          </wsse:UsernameToken>       </wsse:Security>]]></con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>